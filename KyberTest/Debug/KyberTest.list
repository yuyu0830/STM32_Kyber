
KyberTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004b6c  08004b6c  00005b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb4  08004cb4  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cbc  08004cbc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00005cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00005cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004cc4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000014  08004cd8  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a0  08004cd8  000069a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd4a  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002264  00000000  00000000  00012d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00014ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000840  00000000  00000000  00015ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252b1  00000000  00000000  00016318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df47  00000000  00000000  0003b5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7ee9  00000000  00000000  00049510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001313f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  0013143c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00133eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b54 	.word	0x08004b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004b54 	.word	0x08004b54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <unpack_sk>:
*
* Arguments:   - polyvec *sk: pointer to output vector of polynomials (secret key)
*              - const uint8_t *packedsk: pointer to input serialized secret key
**************************************************/
static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES])
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  polyvec_frombytes(sk, packedsk);
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 fd74 	bl	8000fb2 <pqcrystals_kyber768_ref_polyvec_frombytes>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <unpack_ciphertext>:
* Arguments:   - polyvec *b: pointer to the output vector of polynomials b
*              - poly *v: pointer to the output polynomial v
*              - const uint8_t *c: pointer to the input serialized ciphertext
**************************************************/
static void unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES])
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
  polyvec_decompress(b, c);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 fce8 	bl	8000eb6 <pqcrystals_kyber768_ref_polyvec_decompress>
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f503 7370 	add.w	r3, r3, #960	@ 0x3c0
 80004ec:	4619      	mov	r1, r3
 80004ee:	68b8      	ldr	r0, [r7, #8]
 80004f0:	f000 fb33 	bl	8000b5a <pqcrystals_kyber768_ref_poly_decompress>
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <pqcrystals_kyber768_ref_indcpa_dec>:
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	f843 0c04 	str.w	r0, [r3, #-4]
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	f843 1c08 	str.w	r1, [r3, #-8]
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	f843 2c0c 	str.w	r2, [r3, #-12]
  polyvec u, skpv;
  poly v, mp;

  unpack_ciphertext(&u, &v, c);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	461a      	mov	r2, r3
 8000524:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8000528:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 800052c:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ffce 	bl	80004d2 <unpack_ciphertext>
  unpack_sk(&skpv, sk);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	461a      	mov	r2, r3
 800053c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000540:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffb7 	bl	80004b8 <unpack_sk>

  polyvec_ntt(&u);
 800054a:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fd51 	bl	8000ff6 <pqcrystals_kyber768_ref_polyvec_ntt>
  polyvec_basemul_acc_montgomery(&mp, &skpv, &u);
 8000554:	f507 6221 	add.w	r2, r7, #2576	@ 0xa10
 8000558:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fd61 	bl	8001028 <pqcrystals_kyber768_ref_polyvec_basemul_acc_montgomery>
  poly_invntt_tomont(&mp);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fbe0 	bl	8000d30 <pqcrystals_kyber768_ref_poly_invntt_tomont>

  poly_sub(&mp, &v, &mp);
 8000570:	f107 0210 	add.w	r2, r7, #16
 8000574:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fc73 	bl	8000e68 <pqcrystals_kyber768_ref_poly_sub>
  poly_reduce(&mp);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fc28 	bl	8000ddc <pqcrystals_kyber768_ref_poly_reduce>

  poly_tomsg(m, &mp);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	f107 0210 	add.w	r2, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800059a:	f000 fb69 	bl	8000c70 <pqcrystals_kyber768_ref_poly_tomsg>
}
 800059e:	bf00      	nop
 80005a0:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 feea 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f80e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f88e 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f85c 	bl	8000678 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GetStartSignal();
 80005c0:	2202      	movs	r2, #2
 80005c2:	4902      	ldr	r1, [pc, #8]	@ (80005cc <main+0x20>)
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <main+0x24>)
 80005c6:	f002 ff87 	bl	80034d8 <HAL_UART_Receive_IT>
 80005ca:	e7f9      	b.n	80005c0 <main+0x14>
 80005cc:	200000b8 	.word	0x200000b8
 80005d0:	20000030 	.word	0x20000030

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	@ 0x58
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2244      	movs	r2, #68	@ 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fa8a 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fa:	f001 fabb 	bl	8001b74 <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000604:	f000 f92c 	bl	8000860 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000622:	230a      	movs	r3, #10
 8000624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000626:	2307      	movs	r3, #7
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4618      	mov	r0, r3
 8000638:	f001 faf2 	bl	8001c20 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000642:	f000 f90d 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f001 feba 	bl	80023d8 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 f8f9 	bl	8000860 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	@ 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f002 fd6c 	bl	8003198 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f8cb 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000030 	.word	0x20000030
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b28      	ldr	r3, [pc, #160]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b25      	ldr	r3, [pc, #148]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a24      	ldr	r2, [pc, #144]	@ (800079c <MX_GPIO_Init+0xc4>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b22      	ldr	r3, [pc, #136]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_GPIO_Init+0xc4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000756:	f001 f9cd 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 8000772:	f001 f815 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f001 f806 	bl	80017a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800

080007a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <HAL_UART_RxCpltCallback+0x9c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d13f      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x92>
  {
    if (StartSignal[0] == 48) // Get Key
 80007b6:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b30      	cmp	r3, #48	@ 0x30
 80007bc:	d113      	bne.n	80007e6 <HAL_UART_RxCpltCallback+0x42>
    {
    	SendReadySignal();
 80007be:	2364      	movs	r3, #100	@ 0x64
 80007c0:	2202      	movs	r2, #2
 80007c2:	4921      	ldr	r1, [pc, #132]	@ (8000848 <HAL_UART_RxCpltCallback+0xa4>)
 80007c4:	4821      	ldr	r0, [pc, #132]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 80007c6:	f002 fd35 	bl	8003234 <HAL_UART_Transmit>
    	GetKey();
 80007ca:	2364      	movs	r3, #100	@ 0x64
 80007cc:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80007d0:	491f      	ldr	r1, [pc, #124]	@ (8000850 <HAL_UART_RxCpltCallback+0xac>)
 80007d2:	481e      	ldr	r0, [pc, #120]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 80007d4:	f002 fdb7 	bl	8003346 <HAL_UART_Receive>
    	SendDoneSignal();
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	2202      	movs	r2, #2
 80007dc:	491d      	ldr	r1, [pc, #116]	@ (8000854 <HAL_UART_RxCpltCallback+0xb0>)
 80007de:	481b      	ldr	r0, [pc, #108]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 80007e0:	f002 fd28 	bl	8003234 <HAL_UART_Transmit>

    	SendPlainText();
		// End decryption
    }
  }
}
 80007e4:	e027      	b.n	8000836 <HAL_UART_RxCpltCallback+0x92>
    	SendReadySignal();
 80007e6:	2364      	movs	r3, #100	@ 0x64
 80007e8:	2202      	movs	r2, #2
 80007ea:	4917      	ldr	r1, [pc, #92]	@ (8000848 <HAL_UART_RxCpltCallback+0xa4>)
 80007ec:	4817      	ldr	r0, [pc, #92]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 80007ee:	f002 fd21 	bl	8003234 <HAL_UART_Transmit>
    	GetCipherText();
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80007f8:	4917      	ldr	r1, [pc, #92]	@ (8000858 <HAL_UART_RxCpltCallback+0xb4>)
 80007fa:	4814      	ldr	r0, [pc, #80]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 80007fc:	f002 fda3 	bl	8003346 <HAL_UART_Receive>
    	SendDoneSignal();
 8000800:	2364      	movs	r3, #100	@ 0x64
 8000802:	2202      	movs	r2, #2
 8000804:	4913      	ldr	r1, [pc, #76]	@ (8000854 <HAL_UART_RxCpltCallback+0xb0>)
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 8000808:	f002 fd14 	bl	8003234 <HAL_UART_Transmit>
    	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800080c:	2120      	movs	r1, #32
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f001 f987 	bl	8001b24 <HAL_GPIO_TogglePin>
    	indcpa_dec(&PlainText, &CipherText, &SecretKey);
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_UART_RxCpltCallback+0xac>)
 8000818:	490f      	ldr	r1, [pc, #60]	@ (8000858 <HAL_UART_RxCpltCallback+0xb4>)
 800081a:	4810      	ldr	r0, [pc, #64]	@ (800085c <HAL_UART_RxCpltCallback+0xb8>)
 800081c:	f7ff fe6e 	bl	80004fc <pqcrystals_kyber768_ref_indcpa_dec>
    	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000820:	2120      	movs	r1, #32
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 f97d 	bl	8001b24 <HAL_GPIO_TogglePin>
    	SendPlainText();
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	2220      	movs	r2, #32
 800082e:	490b      	ldr	r1, [pc, #44]	@ (800085c <HAL_UART_RxCpltCallback+0xb8>)
 8000830:	4806      	ldr	r0, [pc, #24]	@ (800084c <HAL_UART_RxCpltCallback+0xa8>)
 8000832:	f002 fcff 	bl	8003234 <HAL_UART_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	200000b8 	.word	0x200000b8
 8000848:	20000000 	.word	0x20000000
 800084c:	20000030 	.word	0x20000030
 8000850:	200000bc 	.word	0x200000bc
 8000854:	20000004 	.word	0x20000004
 8000858:	2000053c 	.word	0x2000053c
 800085c:	2000097c 	.word	0x2000097c

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <fqmul>:
* Arguments:   - int16_t a: first factor
*              - int16_t b: second factor
*
* Returns 16-bit integer congruent to a*b*R^{-1} mod q
**************************************************/
static int16_t fqmul(int16_t a, int16_t b) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
  return montgomery_reduce((int32_t)a*b);
 800087c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000880:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fc2f 	bl	80010ec <pqcrystals_kyber768_ref_montgomery_reduce>
 800088e:	4603      	mov	r3, r0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <pqcrystals_kyber768_ref_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int16_t t, zeta;

  k = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  for(len = 128; len >= 2; len >>= 1) {
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	e051      	b.n	800094e <pqcrystals_kyber768_ref_ntt+0xb6>
    for(start = 0; start < 256; start = j + len) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e048      	b.n	8000942 <pqcrystals_kyber768_ref_ntt+0xaa>
      zeta = zetas[k++];
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	613a      	str	r2, [r7, #16]
 80008b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000960 <pqcrystals_kyber768_ref_ntt+0xc8>)
 80008b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008bc:	81fb      	strh	r3, [r7, #14]
      for(j = start; j < start + len; j++) {
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e034      	b.n	800092e <pqcrystals_kyber768_ref_ntt+0x96>
        t = fqmul(zeta, r[j + len]);
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	4413      	add	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffc6 	bl	800086c <fqmul>
 80008e0:	4603      	mov	r3, r0
 80008e2:	81bb      	strh	r3, [r7, #12]
        r[j + len] = r[j] - t;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	b299      	uxth	r1, r3
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	4413      	add	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	4413      	add	r3, r2
 8000904:	b20a      	sxth	r2, r1
 8000906:	801a      	strh	r2, [r3, #0]
        r[j] = r[j] + t;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000914:	b29a      	uxth	r2, r3
 8000916:	89bb      	ldrh	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	b299      	uxth	r1, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	b20a      	sxth	r2, r1
 8000926:	801a      	strh	r2, [r3, #0]
      for(j = start; j < start + len; j++) {
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	4413      	add	r3, r2
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3c4      	bcc.n	80008c4 <pqcrystals_kyber768_ref_ntt+0x2c>
    for(start = 0; start < 256; start = j + len) {
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	4413      	add	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2bff      	cmp	r3, #255	@ 0xff
 8000946:	d9b3      	bls.n	80008b0 <pqcrystals_kyber768_ref_ntt+0x18>
  for(len = 128; len >= 2; len >>= 1) {
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d8aa      	bhi.n	80008aa <pqcrystals_kyber768_ref_ntt+0x12>
      }
    }
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	08004b6c 	.word	0x08004b6c

08000964 <pqcrystals_kyber768_ref_invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void invntt(int16_t r[256]) {
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  unsigned int start, len, j, k;
  int16_t t, zeta;
  const int16_t f = 1441; // mont^2/128
 800096c:	f240 53a1 	movw	r3, #1441	@ 0x5a1
 8000970:	81fb      	strh	r3, [r7, #14]

  k = 127;
 8000972:	237f      	movs	r3, #127	@ 0x7f
 8000974:	613b      	str	r3, [r7, #16]
  for(len = 2; len <= 128; len <<= 1) {
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	e064      	b.n	8000a46 <pqcrystals_kyber768_ref_invntt+0xe2>
    for(start = 0; start < 256; start = j + len) {
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	e05b      	b.n	8000a3a <pqcrystals_kyber768_ref_invntt+0xd6>
      zeta = zetas[k--];
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	613a      	str	r2, [r7, #16]
 8000988:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <pqcrystals_kyber768_ref_invntt+0x128>)
 800098a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098e:	81bb      	strh	r3, [r7, #12]
      for(j = start; j < start + len; j++) {
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e047      	b.n	8000a26 <pqcrystals_kyber768_ref_invntt+0xc2>
        t = r[j];
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	817b      	strh	r3, [r7, #10]
        r[j] = barrett_reduce(t + r[j + len]);
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	897b      	ldrh	r3, [r7, #10]
 80009b6:	4413      	add	r3, r2
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b219      	sxth	r1, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	18d4      	adds	r4, r2, r3
 80009c4:	4608      	mov	r0, r1
 80009c6:	f000 fbba 	bl	800113e <pqcrystals_kyber768_ref_barrett_reduce>
 80009ca:	4603      	mov	r3, r0
 80009cc:	8023      	strh	r3, [r4, #0]
        r[j + len] = r[j + len] - t;
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4413      	add	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b299      	uxth	r1, r3
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	b20a      	sxth	r2, r1
 80009f4:	801a      	strh	r2, [r3, #0]
        r[j + len] = fqmul(zeta, r[j + len]);
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	18d4      	adds	r4, r2, r3
 8000a12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff28 	bl	800086c <fqmul>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	8023      	strh	r3, [r4, #0]
      for(j = start; j < start + len; j++) {
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3b1      	bcc.n	8000996 <pqcrystals_kyber768_ref_invntt+0x32>
    for(start = 0; start < 256; start = j + len) {
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	4413      	add	r3, r2
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	2bff      	cmp	r3, #255	@ 0xff
 8000a3e:	d9a0      	bls.n	8000982 <pqcrystals_kyber768_ref_invntt+0x1e>
  for(len = 2; len <= 128; len <<= 1) {
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2b80      	cmp	r3, #128	@ 0x80
 8000a4a:	d997      	bls.n	800097c <pqcrystals_kyber768_ref_invntt+0x18>
      }
    }
  }

  for(j = 0; j < 256; j++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e013      	b.n	8000a7a <pqcrystals_kyber768_ref_invntt+0x116>
    r[j] = fqmul(r[j], f);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d4      	adds	r4, r2, r3
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f7ff fefe 	bl	800086c <fqmul>
 8000a70:	4603      	mov	r3, r0
 8000a72:	8023      	strh	r3, [r4, #0]
  for(j = 0; j < 256; j++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2bff      	cmp	r3, #255	@ 0xff
 8000a7e:	d9e8      	bls.n	8000a52 <pqcrystals_kyber768_ref_invntt+0xee>
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3724      	adds	r7, #36	@ 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08004b6c 	.word	0x08004b6c

08000a90 <pqcrystals_kyber768_ref_basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	807b      	strh	r3, [r7, #2]
  r[0]  = fqmul(a[1], b[1]);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f7ff fedb 	bl	800086c <fqmul>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	801a      	strh	r2, [r3, #0]
  r[0]  = fqmul(r[0], zeta);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fece 	bl	800086c <fqmul>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	801a      	strh	r2, [r3, #0]
  r[0] += fqmul(a[0], b[0]);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	f7ff fec0 	bl	800086c <fqmul>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4619      	mov	r1, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	b28b      	uxth	r3, r1
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	801a      	strh	r2, [r3, #0]
  r[1]  = fqmul(a[0], b[1]);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1c9c      	adds	r4, r3, #2
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fea8 	bl	800086c <fqmul>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	8023      	strh	r3, [r4, #0]
  r[1] += fqmul(a[1], b[0]);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3302      	adds	r3, #2
 8000b24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4610      	mov	r0, r2
 8000b32:	f7ff fe9b 	bl	800086c <fqmul>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	b28b      	uxth	r3, r1
 8000b46:	4413      	add	r3, r2
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	b212      	sxth	r2, r2
 8000b50:	801a      	strh	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}

08000b5a <pqcrystals_kyber768_ref_poly_decompress>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
**************************************************/
void poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES])
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  unsigned int i;

#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/2;i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e027      	b.n	8000bba <pqcrystals_kyber768_ref_poly_decompress+0x60>
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	1119      	asrs	r1, r3, #4
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	005a      	lsls	r2, r3, #1
 8000b82:	b209      	sxth	r1, r1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	f640 5301 	movw	r3, #3329	@ 0xd01
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	1119      	asrs	r1, r3, #4
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	b209      	sxth	r1, r1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    a += 1;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
  for(i=0;i<KYBER_N/2;i++) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bbe:	d9d4      	bls.n	8000b6a <pqcrystals_kyber768_ref_poly_decompress+0x10>
      r->coeffs[8*i+j] = ((uint32_t)(t[j] & 31)*KYBER_Q + 16) >> 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <pqcrystals_kyber768_ref_poly_frombytes>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e03e      	b.n	8000c5c <pqcrystals_kyber768_ref_poly_frombytes+0x8e>
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b219      	sxth	r1, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	430b      	orrs	r3, r1
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c0e:	b219      	sxth	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b219      	sxth	r1, r3
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	3302      	adds	r3, #2
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	430b      	orrs	r3, r1
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	3201      	adds	r2, #1
 8000c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c4e:	b219      	sxth	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N/2;i++) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c60:	d9bd      	bls.n	8000bde <pqcrystals_kyber768_ref_poly_frombytes+0x10>
  }
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <pqcrystals_kyber768_ref_poly_tomsg>:
*
* Arguments:   - uint8_t *msg: pointer to output message
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint32_t t;

  for(i=0;i<KYBER_N/8;i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e03e      	b.n	8000cfe <pqcrystals_kyber768_ref_poly_tomsg+0x8e>
    msg[i] = 0;
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	4413      	add	r3, r2
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e030      	b.n	8000cf2 <pqcrystals_kyber768_ref_poly_tomsg+0x82>
      t  = a->coeffs[8*i+j];
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	00da      	lsls	r2, r3, #3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	441a      	add	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000c9e:	60fb      	str	r3, [r7, #12]
      // t += ((int16_t)t >> 15) & KYBER_Q;
      // t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
      t <<= 1;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
      t += 1665;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f203 6381 	addw	r3, r3, #1665	@ 0x681
 8000cac:	60fb      	str	r3, [r7, #12]
      t *= 80635;
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	009a      	lsls	r2, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
      t >>= 28;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	0f1b      	lsrs	r3, r3, #28
 8000cc4:	60fb      	str	r3, [r7, #12]
      t &= 1;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
      msg[i] |= t << j;
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7819      	ldrb	r1, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4403      	add	r3, r0
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9cb      	bls.n	8000c90 <pqcrystals_kyber768_ref_poly_tomsg+0x20>
  for(i=0;i<KYBER_N/8;i++) {
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b1f      	cmp	r3, #31
 8000d02:	d9bd      	bls.n	8000c80 <pqcrystals_kyber768_ref_poly_tomsg+0x10>
    }
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	371c      	adds	r7, #28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <pqcrystals_kyber768_ref_poly_ntt>:
*              inputs assumed to be in normal order, output in bitreversed order
*
* Arguments:   - uint16_t *r: pointer to in/output polynomial
**************************************************/
void poly_ntt(poly *r)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  ntt(r->coeffs);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fdbb 	bl	8000898 <pqcrystals_kyber768_ref_ntt>
  poly_reduce(r);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f85a 	bl	8000ddc <pqcrystals_kyber768_ref_poly_reduce>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <pqcrystals_kyber768_ref_poly_invntt_tomont>:
*              inputs assumed to be in bitreversed order, output in normal order
*
* Arguments:   - uint16_t *a: pointer to in/output polynomial
**************************************************/
void poly_invntt_tomont(poly *r)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  invntt(r->coeffs);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe12 	bl	8000964 <pqcrystals_kyber768_ref_invntt>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <pqcrystals_kyber768_ref_poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e035      	b.n	8000dc6 <pqcrystals_kyber768_ref_poly_basemul_montgomery+0x7e>
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	18d0      	adds	r0, r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	18d1      	adds	r1, r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	441a      	add	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3340      	adds	r3, #64	@ 0x40
 8000d7c:	4c16      	ldr	r4, [pc, #88]	@ (8000dd8 <pqcrystals_kyber768_ref_poly_basemul_montgomery+0x90>)
 8000d7e:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8000d82:	f7ff fe85 	bl	8000a90 <pqcrystals_kyber768_ref_basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	18d0      	adds	r0, r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	18d1      	adds	r1, r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	441a      	add	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3340      	adds	r3, #64	@ 0x40
 8000dae:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <pqcrystals_kyber768_ref_poly_basemul_montgomery+0x90>)
 8000db0:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	425b      	negs	r3, r3
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	f7ff fe68 	bl	8000a90 <pqcrystals_kyber768_ref_basemul>
  for(i=0;i<KYBER_N/4;i++) {
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dca:	d9c6      	bls.n	8000d5a <pqcrystals_kyber768_ref_poly_basemul_montgomery+0x12>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08004b6c 	.word	0x08004b6c

08000ddc <pqcrystals_kyber768_ref_poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e00f      	b.n	8000e0a <pqcrystals_kyber768_ref_poly_reduce+0x2e>
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f9a3 	bl	800113e <pqcrystals_kyber768_ref_barrett_reduce>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2bff      	cmp	r3, #255	@ 0xff
 8000e0e:	d9ec      	bls.n	8000dea <pqcrystals_kyber768_ref_poly_reduce+0xe>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <pqcrystals_kyber768_ref_poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b087      	sub	sp, #28
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e013      	b.n	8000e54 <pqcrystals_kyber768_ref_poly_add+0x3a>
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6979      	ldr	r1, [r7, #20]
 8000e3a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b219      	sxth	r1, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2bff      	cmp	r3, #255	@ 0xff
 8000e58:	d9e8      	bls.n	8000e2c <pqcrystals_kyber768_ref_poly_add+0x12>
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <pqcrystals_kyber768_ref_poly_sub>:
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_sub(poly *r, const poly *a, const poly *b)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e013      	b.n	8000ea2 <pqcrystals_kyber768_ref_poly_sub+0x3a>
    r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6979      	ldr	r1, [r7, #20]
 8000e88:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b219      	sxth	r1, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2bff      	cmp	r3, #255	@ 0xff
 8000ea6:	d9e8      	bls.n	8000e7a <pqcrystals_kyber768_ref_poly_sub+0x12>
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <pqcrystals_kyber768_ref_polyvec_decompress>:
* Arguments:   - polyvec *r:       pointer to output vector of polynomials
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
**************************************************/
void polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES])
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b089      	sub	sp, #36	@ 0x24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
        r->vec[i].coeffs[8*j+k] = ((uint32_t)(t[k] & 0x7FF)*KYBER_Q + 1024) >> 11;
    }
  }
#elif (KYBER_POLYVECCOMPRESSEDBYTES == (KYBER_K * 320))
  uint16_t t[4];
  for(i=0;i<KYBER_K;i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	e06b      	b.n	8000f9e <pqcrystals_kyber768_ref_polyvec_decompress+0xe8>
    for(j=0;j<KYBER_N/4;j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	e062      	b.n	8000f92 <pqcrystals_kyber768_ref_polyvec_decompress+0xdc>
      t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	81bb      	strh	r3, [r7, #12]
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	019b      	lsls	r3, r3, #6
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	81fb      	strh	r3, [r7, #14]
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3302      	adds	r3, #2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3303      	adds	r3, #3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	823b      	strh	r3, [r7, #16]
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3303      	adds	r3, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	099b      	lsrs	r3, r3, #6
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	827b      	strh	r3, [r7, #18]
      a += 5;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	3305      	adds	r3, #5
 8000f42:	603b      	str	r3, [r7, #0]

      for(k=0;k<4;k++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e01d      	b.n	8000f86 <pqcrystals_kyber768_ref_polyvec_decompress+0xd0>
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	3320      	adds	r3, #32
 8000f50:	443b      	add	r3, r7
 8000f52:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f5a:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f66:	0a99      	lsrs	r1, r3, #10
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	009a      	lsls	r2, r3, #2
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	441a      	add	r2, r3
 8000f70:	b208      	sxth	r0, r1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69f9      	ldr	r1, [r7, #28]
 8000f76:	0209      	lsls	r1, r1, #8
 8000f78:	440a      	add	r2, r1
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(k=0;k<4;k++)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d9de      	bls.n	8000f4a <pqcrystals_kyber768_ref_polyvec_decompress+0x94>
    for(j=0;j<KYBER_N/4;j++) {
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f96:	d999      	bls.n	8000ecc <pqcrystals_kyber768_ref_polyvec_decompress+0x16>
  for(i=0;i<KYBER_K;i++) {
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d990      	bls.n	8000ec6 <pqcrystals_kyber768_ref_polyvec_decompress+0x10>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <pqcrystals_kyber768_ref_polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e011      	b.n	8000fe6 <pqcrystals_kyber768_ref_polyvec_frombytes+0x34>
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	18d0      	adds	r0, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdf7 	bl	8000bce <pqcrystals_kyber768_ref_poly_frombytes>
  for(i=0;i<KYBER_K;i++)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d9ea      	bls.n	8000fc2 <pqcrystals_kyber768_ref_polyvec_frombytes+0x10>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <pqcrystals_kyber768_ref_polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e009      	b.n	8001018 <pqcrystals_kyber768_ref_polyvec_ntt+0x22>
    poly_ntt(&r->vec[i]);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe80 	bl	8000d12 <pqcrystals_kyber768_ref_poly_ntt>
  for(i=0;i<KYBER_K;i++)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3301      	adds	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d9f2      	bls.n	8001004 <pqcrystals_kyber768_ref_polyvec_ntt+0xe>
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <pqcrystals_kyber768_ref_polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800102e:	af00      	add	r7, sp, #0
 8001030:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001034:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001038:	6018      	str	r0, [r3, #0]
 800103a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800103e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001042:	6019      	str	r1, [r3, #0]
 8001044:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001048:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800104c:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 800104e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001052:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800105c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001066:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f7ff fe6c 	bl	8000d48 <pqcrystals_kyber768_ref_poly_basemul_montgomery>
  for(i=1;i<KYBER_K;i++) {
 8001070:	2301      	movs	r3, #1
 8001072:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001076:	e029      	b.n	80010cc <pqcrystals_kyber768_ref_polyvec_basemul_acc_montgomery+0xa4>
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8001078:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800107c:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8001080:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	18d1      	adds	r1, r2, r3
 800108a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800108e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8001092:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	441a      	add	r2, r3
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe51 	bl	8000d48 <pqcrystals_kyber768_ref_poly_basemul_montgomery>
    poly_add(r, r, &t);
 80010a6:	f107 0214 	add.w	r2, r7, #20
 80010aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80010ae:	f5a3 7103 	sub.w	r1, r3, #524	@ 0x20c
 80010b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80010b6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010ba:	6809      	ldr	r1, [r1, #0]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f7ff feac 	bl	8000e1a <pqcrystals_kyber768_ref_poly_add>
  for(i=1;i<KYBER_K;i++) {
 80010c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80010cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d9d1      	bls.n	8001078 <pqcrystals_kyber768_ref_polyvec_basemul_acc_montgomery+0x50>
  }

  poly_reduce(r);
 80010d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80010d8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f7ff fe7d 	bl	8000ddc <pqcrystals_kyber768_ref_poly_reduce>
}
 80010e2:	bf00      	nop
 80010e4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <pqcrystals_kyber768_ref_montgomery_reduce>:
*                           has to be in {-q2^15,...,q2^15-1}
*
* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  int16_t t;

  t = (int16_t)a*QINV;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	0052      	lsls	r2, r2, #1
 80010fc:	441a      	add	r2, r3
 80010fe:	4611      	mov	r1, r2
 8001100:	00c8      	lsls	r0, r1, #3
 8001102:	4611      	mov	r1, r2
 8001104:	4602      	mov	r2, r0
 8001106:	440a      	add	r2, r1
 8001108:	4611      	mov	r1, r2
 800110a:	00c8      	lsls	r0, r1, #3
 800110c:	4611      	mov	r1, r2
 800110e:	4602      	mov	r2, r0
 8001110:	440a      	add	r2, r1
 8001112:	0212      	lsls	r2, r2, #8
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
 8001118:	81fb      	strh	r3, [r7, #14]
  t = (a - (int32_t)t*KYBER_Q) >> 16;
 800111a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800111e:	f46f 6250 	mvn.w	r2, #3328	@ 0xd00
 8001122:	fb03 f202 	mul.w	r2, r3, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	141b      	asrs	r3, r3, #16
 800112c:	81fb      	strh	r3, [r7, #14]
  return t;
 800112e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <pqcrystals_kyber768_ref_barrett_reduce>:
*
* Arguments:   - int16_t a: input integer to be reduced
*
* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
**************************************************/
int16_t barrett_reduce(int16_t a) {
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	80fb      	strh	r3, [r7, #6]
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;
 8001148:	f644 63bf 	movw	r3, #20159	@ 0x4ebf
 800114c:	81fb      	strh	r3, [r7, #14]

  t  = ((int32_t)v*a + (1<<25)) >> 26;
 800114e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 800115e:	169b      	asrs	r3, r3, #26
 8001160:	81bb      	strh	r3, [r7, #12]
  t *= KYBER_Q;
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	461a      	mov	r2, r3
 8001166:	0052      	lsls	r2, r2, #1
 8001168:	441a      	add	r2, r3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	441a      	add	r2, r3
 800116e:	0212      	lsls	r2, r2, #8
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	81bb      	strh	r3, [r7, #12]
  return a - t;
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	89bb      	ldrh	r3, [r7, #12]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21b      	sxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_MspInit+0x44>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	@ 0x60
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_MspInit+0x44>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0ac      	sub	sp, #176	@ 0xb0
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2288      	movs	r2, #136	@ 0x88
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fc81 	bl	8004afc <memset>
  if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <HAL_UART_MspInit+0xc0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d143      	bne.n	800128c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fb05 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800121c:	f7ff fb20 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122a:	6593      	str	r3, [r2, #88]	@ 0x58
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0xc4>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001250:	230c      	movs	r3, #12
 8001252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001268:	2307      	movs	r3, #7
 800126a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001278:	f000 fa92 	bl	80017a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2026      	movs	r0, #38	@ 0x26
 8001282:	f000 f9d8 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001286:	2026      	movs	r0, #38	@ 0x26
 8001288:	f000 f9f1 	bl	800166e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800128c:	bf00      	nop
 800128e:	37b0      	adds	r7, #176	@ 0xb0
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004400 	.word	0x40004400
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f8a5 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <USART2_IRQHandler+0x10>)
 8001302:	f002 f935 	bl	8003570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000030 	.word	0x20000030

08001310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001338:	f7ff ffea 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopForever+0xe>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f003 fbd3 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001366:	f7ff f921 	bl	80005ac <main>

0800136a <LoopForever>:

LoopForever:
    b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800136c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001378:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 800137c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001380:	200009a0 	.word	0x200009a0

08001384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_2_IRQHandler>
	...

08001388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_Init+0x3c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_Init+0x3c>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f93e 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f80f 	bl	80013c8 <HAL_InitTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	e001      	b.n	80013ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b6:	f7ff fee9 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_InitTick+0x6c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d023      	beq.n	8001424 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_InitTick+0x70>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <HAL_InitTick+0x6c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f949 	bl	800168a <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d809      	bhi.n	8001418 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f913 	bl	8001636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_InitTick+0x74>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e007      	b.n	8001428 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e004      	b.n	8001428 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e001      	b.n	8001428 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000010 	.word	0x20000010
 8001438:	20000008 	.word	0x20000008
 800143c:	2000000c 	.word	0x2000000c

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000010 	.word	0x20000010
 8001464:	2000099c 	.word	0x2000099c

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000099c 	.word	0x2000099c

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	@ (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	@ (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	@ (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d008      	beq.n	80016cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e022      	b.n	8001712 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020e 	bic.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f003 021c 	and.w	r2, r3, #28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d005      	beq.n	8001742 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2204      	movs	r2, #4
 800173a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e029      	b.n	8001796 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 020e 	bic.w	r2, r2, #14
 8001750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f003 021c 	and.w	r2, r3, #28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    }
  }
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	e17f      	b.n	8001ab0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8171 	beq.w	8001aaa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x40>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d118      	bne.n	8001880 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	6939      	ldr	r1, [r7, #16]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80ac 	beq.w	8001aaa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <HAL_GPIO_Init+0x330>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_GPIO_Init+0x330>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6613      	str	r3, [r2, #96]	@ 0x60
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <HAL_GPIO_Init+0x330>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800196a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad4 <HAL_GPIO_Init+0x334>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x242>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad8 <HAL_GPIO_Init+0x338>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x23e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <HAL_GPIO_Init+0x33c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x23a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae0 <HAL_GPIO_Init+0x340>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x236>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <HAL_GPIO_Init+0x344>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x232>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae8 <HAL_GPIO_Init+0x348>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	@ (8001aec <HAL_GPIO_Init+0x34c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x22a>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e00c      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e00a      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x244>
 80019e2:	2300      	movs	r3, #0
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f4:	4937      	ldr	r1, [pc, #220]	@ (8001ad4 <HAL_GPIO_Init+0x334>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a26:	4a32      	ldr	r2, [pc, #200]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a2c:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a50:	4a27      	ldr	r2, [pc, #156]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa4:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f ae78 	bne.w	80017b0 <HAL_GPIO_Init+0x10>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000c00 	.word	0x48000c00
 8001ae4:	48001000 	.word	0x48001000
 8001ae8:	48001400 	.word	0x48001400
 8001aec:	48001800 	.word	0x48001800
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43d9      	mvns	r1, r3
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	400b      	ands	r3, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b82:	d130      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b90:	d038      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2232      	movs	r2, #50	@ 0x32
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9b      	lsrs	r3, r3, #18
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb8:	e002      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bcc:	d102      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f2      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be0:	d110      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e00f      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf2:	d007      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bfc:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40007000 	.word	0x40007000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e3ca      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c32:	4b97      	ldr	r3, [pc, #604]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3c:	4b94      	ldr	r3, [pc, #592]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80e4 	beq.w	8001e1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4a>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	f040 808b 	bne.w	8001d78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 8087 	bne.w	8001d78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6a:	4b89      	ldr	r3, [pc, #548]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x62>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e3a2      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	4b82      	ldr	r3, [pc, #520]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_RCC_OscConfig+0x7c>
 8001c92:	4b7f      	ldr	r3, [pc, #508]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_OscConfig+0x88>
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d223      	bcs.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fd55 	bl	8002760 <RCC_SetFlashLatencyFromMSIRange>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e383      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc0:	4b73      	ldr	r3, [pc, #460]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a72      	ldr	r2, [pc, #456]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	496d      	ldr	r1, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	4b6c      	ldr	r3, [pc, #432]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4968      	ldr	r1, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e025      	b.n	8001d40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4960      	ldr	r1, [pc, #384]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d12:	4b5f      	ldr	r3, [pc, #380]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	495b      	ldr	r1, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fd15 	bl	8002760 <RCC_SetFlashLatencyFromMSIRange>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e343      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d40:	f000 fc4a 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b52      	ldr	r3, [pc, #328]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	4950      	ldr	r1, [pc, #320]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_RCC_OscConfig+0x278>)
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d60:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fb2f 	bl	80013c8 <HAL_InitTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d052      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	e327      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d032      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d80:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a42      	ldr	r2, [pc, #264]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fb6c 	bl	8001468 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d94:	f7ff fb68 	bl	8001468 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e310      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da6:	4b3a      	ldr	r3, [pc, #232]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db2:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a36      	ldr	r2, [pc, #216]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4931      	ldr	r1, [pc, #196]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	492c      	ldr	r1, [pc, #176]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
 8001de4:	e01a      	b.n	8001e1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df2:	f7ff fb39 	bl	8001468 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb35 	bl	8001468 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e2dd      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1da>
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d074      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x21a>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d10e      	bne.n	8001e52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d064      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d160      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e2ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x24a>
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e026      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e72:	d115      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x280>
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a02      	ldr	r2, [pc, #8]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08004c6c 	.word	0x08004c6c
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a9f      	ldr	r2, [pc, #636]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b9d      	ldr	r3, [pc, #628]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fad2 	bl	8001468 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff face 	bl	8001468 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	@ 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e276      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b92      	ldr	r3, [pc, #584]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2a8>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fabe 	bl	8001468 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff faba 	bl	8001468 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e262      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	4b88      	ldr	r3, [pc, #544]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d0>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d060      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x310>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d116      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x328>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e23f      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4973      	ldr	r1, [pc, #460]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	e040      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d023      	beq.n	8001fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f66:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff fa79 	bl	8001468 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fa75 	bl	8001468 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e21d      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b62      	ldr	r3, [pc, #392]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	495f      	ldr	r1, [pc, #380]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e018      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fa55 	bl	8001468 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fa51 	bl	8001468 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1f9      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03c      	beq.n	8002066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01c      	beq.n	800202e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff fa30 	bl	8001468 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff fa2c 	bl	8001468 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1d4      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x3ec>
 800202c:	e01b      	b.n	8002066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff fa13 	bl	8001468 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff fa0f 	bl	8001468 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1b7      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ef      	bne.n	8002046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80a6 	beq.w	80021c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f9d6 	bl	8001468 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7ff f9d2 	bl	8001468 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d8>
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f6:	e029      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d115      	bne.n	800212c <HAL_RCC_OscConfig+0x50c>
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	4a03      	ldr	r2, [pc, #12]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	4b9c      	ldr	r3, [pc, #624]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a9b      	ldr	r2, [pc, #620]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213c:	4b98      	ldr	r3, [pc, #608]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a97      	ldr	r2, [pc, #604]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f988 	bl	8001468 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff f984 	bl	8001468 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e12a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	4b8b      	ldr	r3, [pc, #556]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ed      	beq.n	800215c <HAL_RCC_OscConfig+0x53c>
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff f971 	bl	8001468 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff f96d 	bl	8001468 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e113      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a0:	4b7f      	ldr	r3, [pc, #508]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ed      	bne.n	800218a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b7a      	ldr	r3, [pc, #488]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4a79      	ldr	r2, [pc, #484]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80fe 	beq.w	80023c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f040 80d0 	bne.w	8002374 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d4:	4b72      	ldr	r3, [pc, #456]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d130      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	3b01      	subs	r3, #1
 80021f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d127      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11f      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002214:	2a07      	cmp	r2, #7
 8002216:	bf14      	ite	ne
 8002218:	2201      	movne	r2, #1
 800221a:	2200      	moveq	r2, #0
 800221c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	4293      	cmp	r3, r2
 8002220:	d113      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d109      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d06e      	beq.n	8002328 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d069      	beq.n	8002324 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002250:	4b53      	ldr	r3, [pc, #332]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800225c:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0ad      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800226c:	4b4c      	ldr	r3, [pc, #304]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002278:	f7ff f8f6 	bl	8001468 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff f8f2 	bl	8001468 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e09a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b40      	ldr	r3, [pc, #256]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022ae:	3a01      	subs	r2, #1
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022b8:	0212      	lsls	r2, r2, #8
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022c0:	0852      	lsrs	r2, r2, #1
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0552      	lsls	r2, r2, #21
 80022c6:	4311      	orrs	r1, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022cc:	0852      	lsrs	r2, r2, #1
 80022ce:	3a01      	subs	r2, #1
 80022d0:	0652      	lsls	r2, r2, #25
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022d8:	0912      	lsrs	r2, r2, #4
 80022da:	0452      	lsls	r2, r2, #17
 80022dc:	430a      	orrs	r2, r1
 80022de:	4930      	ldr	r1, [pc, #192]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022fc:	f7ff f8b4 	bl	8001468 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff f8b0 	bl	8001468 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e058      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002322:	e050      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e04f      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d148      	bne.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002334:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800234c:	f7ff f88c 	bl	8001468 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff f888 	bl	8001468 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e030      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x734>
 8002372:	e028      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d023      	beq.n	80023c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a08      	ldr	r2, [pc, #32]	@ (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff f86f 	bl	8001468 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	e00c      	b.n	80023a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff f86b 	bl	8001468 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d905      	bls.n	80023a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ec      	bne.n	800238e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4905      	ldr	r1, [pc, #20]	@ (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCC_OscConfig+0x7b4>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
 80023c0:	e001      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	feeefffc 	.word	0xfeeefffc

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0e7      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b75      	ldr	r3, [pc, #468]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d910      	bls.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b72      	ldr	r3, [pc, #456]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4970      	ldr	r1, [pc, #448]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b6e      	ldr	r3, [pc, #440]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cf      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d010      	beq.n	800244a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b66      	ldr	r3, [pc, #408]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002434:	429a      	cmp	r2, r3
 8002436:	d908      	bls.n	800244a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4960      	ldr	r1, [pc, #384]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d04c      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	4b5a      	ldr	r3, [pc, #360]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d121      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0a6      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e09a      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248e:	4b4e      	ldr	r3, [pc, #312]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08e      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249e:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e086      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b46      	ldr	r3, [pc, #280]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4943      	ldr	r1, [pc, #268]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe ffd2 	bl	8001468 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe ffce 	bl	8001468 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06e      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	492b      	ldr	r1, [pc, #172]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251e:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d210      	bcs.n	800254e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252c:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	4923      	ldr	r1, [pc, #140]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e036      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4918      	ldr	r1, [pc, #96]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4910      	ldr	r1, [pc, #64]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800258c:	f000 f824 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	490b      	ldr	r1, [pc, #44]	@ (80025cc <HAL_RCC_ClockConfig+0x1f4>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1f8>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_ClockConfig+0x1fc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ff09 	bl	80013c8 <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ba:	7afb      	ldrb	r3, [r7, #11]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004c6c 	.word	0x08004c6c
 80025d0:	20000008 	.word	0x20000008
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4b3e      	ldr	r3, [pc, #248]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d121      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d11e      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800260c:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002618:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e005      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002634:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d102      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002650:	4b25      	ldr	r3, [pc, #148]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	e004      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d101      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800265c:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x114>)
 800265e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d134      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0xa6>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d003      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xac>
 800267c:	e005      	b.n	800268a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800267e:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002680:	617b      	str	r3, [r7, #20]
      break;
 8002682:	e005      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	617b      	str	r3, [r7, #20]
      break;
 8002688:	e002      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	3301      	adds	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	fb03 f202 	mul.w	r2, r3, r2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	0e5b      	lsrs	r3, r3, #25
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	3301      	adds	r3, #1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d0:	69bb      	ldr	r3, [r7, #24]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08004c84 	.word	0x08004c84
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800270c:	f7ff fff0 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4904      	ldr	r1, [pc, #16]	@ (8002730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	08004c7c 	.word	0x08004c7c

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002738:	f7ff ffda 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0adb      	lsrs	r3, r3, #11
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4904      	ldr	r1, [pc, #16]	@ (800275c <HAL_RCC_GetPCLK2Freq+0x28>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	08004c7c 	.word	0x08004c7c

08002760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800276c:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002778:	f7ff f9ee 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 800277c:	6178      	str	r0, [r7, #20]
 800277e:	e014      	b.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	4a24      	ldr	r2, [pc, #144]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	@ 0x58
 800278c:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002798:	f7ff f9de 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 800279c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b0:	d10b      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b80      	cmp	r3, #128	@ 0x80
 80027b6:	d919      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80027bc:	d902      	bls.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027be:	2302      	movs	r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	e013      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c4:	2301      	movs	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e010      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	@ 0x80
 80027ce:	d902      	bls.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027d0:	2303      	movs	r3, #3
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e00a      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b80      	cmp	r3, #128	@ 0x80
 80027da:	d102      	bne.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027dc:	2302      	movs	r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e004      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b70      	cmp	r3, #112	@ 0x70
 80027e6:	d101      	bne.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	4909      	ldr	r1, [pc, #36]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002828:	2300      	movs	r3, #0
 800282a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800282c:	2300      	movs	r3, #0
 800282e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002838:	2b00      	cmp	r3, #0
 800283a:	d041      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002840:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002846:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800284a:	d824      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002856:	d81e      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800285c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002860:	d010      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002864:	4b86      	ldr	r3, [pc, #536]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a85      	ldr	r2, [pc, #532]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002870:	e015      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fabb 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002882:	e00c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3320      	adds	r3, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fba6 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	74fb      	strb	r3, [r7, #19]
      break;
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a4:	4b76      	ldr	r3, [pc, #472]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b2:	4973      	ldr	r1, [pc, #460]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d041      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028d4:	d02a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028da:	d824      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028e6:	d81e      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f0:	d010      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f2:	e018      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f4:	4b62      	ldr	r3, [pc, #392]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a61      	ldr	r2, [pc, #388]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002900:	e015      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fa73 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002912:	e00c      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3320      	adds	r3, #32
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fb5e 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002924:	e003      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	74fb      	strb	r3, [r7, #19]
      break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800292c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002934:	4b52      	ldr	r3, [pc, #328]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002942:	494f      	ldr	r1, [pc, #316]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a0 	beq.w	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	4a40      	ldr	r2, [pc, #256]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	@ 0x58
 8002984:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002994:	4b3b      	ldr	r3, [pc, #236]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fd62 	bl	8001468 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a6:	e009      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fd5e 	bl	8001468 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	74fb      	strb	r3, [r7, #19]
        break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029bc:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d15c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d019      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ec:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f8:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	4a20      	ldr	r2, [pc, #128]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a08:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a18:	4a19      	ldr	r2, [pc, #100]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fd1d 	bl	8001468 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a30:	e00b      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fd19 	bl	8001468 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d902      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	74fb      	strb	r3, [r7, #19]
            break;
 8002a48:	e006      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ec      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6e:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a76:	e009      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
 8002a7c:	e006      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8c:	7c7b      	ldrb	r3, [r7, #17]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b9e      	ldr	r3, [pc, #632]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	4a9d      	ldr	r2, [pc, #628]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aaa:	4b98      	ldr	r3, [pc, #608]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f023 0203 	bic.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	4994      	ldr	r1, [pc, #592]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002acc:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f023 020c 	bic.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	498c      	ldr	r1, [pc, #560]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aee:	4b87      	ldr	r3, [pc, #540]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4983      	ldr	r1, [pc, #524]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b10:	4b7e      	ldr	r3, [pc, #504]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	497b      	ldr	r1, [pc, #492]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b32:	4b76      	ldr	r3, [pc, #472]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	4972      	ldr	r1, [pc, #456]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b54:	4b6d      	ldr	r3, [pc, #436]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	496a      	ldr	r1, [pc, #424]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b76:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	4961      	ldr	r1, [pc, #388]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b98:	4b5c      	ldr	r3, [pc, #368]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba6:	4959      	ldr	r1, [pc, #356]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bba:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc8:	4950      	ldr	r1, [pc, #320]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bea:	4948      	ldr	r1, [pc, #288]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfe:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	493f      	ldr	r1, [pc, #252]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d028      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c2e:	4937      	ldr	r1, [pc, #220]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a31      	ldr	r2, [pc, #196]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
 8002c4c:	e011      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f8c8 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d028      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c7e:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	491f      	ldr	r1, [pc, #124]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ca8:	60d3      	str	r3, [r2, #12]
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f899 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a02      	ldr	r2, [pc, #8]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d06:	60d3      	str	r3, [r2, #12]
 8002d08:	e014      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f867 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d4e:	4928      	ldr	r1, [pc, #160]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f844 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	74bb      	strb	r3, [r7, #18]
 8002d7a:	e011      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3320      	adds	r3, #32
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f925 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dac:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dba:	490d      	ldr	r1, [pc, #52]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dde:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002de6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000

08002df4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e02:	4b75      	ldr	r3, [pc, #468]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d018      	beq.n	8002e40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e0e:	4b72      	ldr	r3, [pc, #456]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0203 	and.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10d      	bne.n	8002e3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
       ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e26:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
       ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d047      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e044      	b.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d018      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x86>
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d825      	bhi.n	8002e98 <RCCEx_PLLSAI1_Config+0xa4>
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d002      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x62>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d009      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x74>
 8002e54:	e020      	b.n	8002e98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e56:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11d      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e01a      	b.n	8002e9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e68:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e013      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e7a:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e86:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e96:	e006      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e004      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eae:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	4944      	ldr	r1, [pc, #272]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d17d      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed0:	4b41      	ldr	r3, [pc, #260]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a40      	ldr	r2, [pc, #256]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe fac4 	bl	8001468 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee4:	f7fe fac0 	bl	8001468 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef8:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ef      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d160      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	0211      	lsls	r1, r2, #8
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	0912      	lsrs	r2, r2, #4
 8002f28:	0452      	lsls	r2, r2, #17
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	492a      	ldr	r1, [pc, #168]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]
 8002f32:	e027      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d112      	bne.n	8002f60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f3a:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	0211      	lsls	r1, r2, #8
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6912      	ldr	r2, [r2, #16]
 8002f50:	0852      	lsrs	r2, r2, #1
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0552      	lsls	r2, r2, #21
 8002f56:	430a      	orrs	r2, r1
 8002f58:	491f      	ldr	r1, [pc, #124]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	610b      	str	r3, [r1, #16]
 8002f5e:	e011      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6952      	ldr	r2, [r2, #20]
 8002f76:	0852      	lsrs	r2, r2, #1
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0652      	lsls	r2, r2, #25
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4916      	ldr	r1, [pc, #88]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fa6a 	bl	8001468 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f96:	e009      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f98:	f7fe fa66 	bl	8001468 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	73fb      	strb	r3, [r7, #15]
          break;
 8002faa:	e005      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4904      	ldr	r1, [pc, #16]	@ (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000

08002fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fea:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ff6:	4b67      	ldr	r3, [pc, #412]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0203 	and.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
       ||
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800300e:	4b61      	ldr	r3, [pc, #388]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
       ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d047      	beq.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e044      	b.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d018      	beq.n	8003062 <RCCEx_PLLSAI2_Config+0x86>
 8003030:	2b03      	cmp	r3, #3
 8003032:	d825      	bhi.n	8003080 <RCCEx_PLLSAI2_Config+0xa4>
 8003034:	2b01      	cmp	r3, #1
 8003036:	d002      	beq.n	800303e <RCCEx_PLLSAI2_Config+0x62>
 8003038:	2b02      	cmp	r3, #2
 800303a:	d009      	beq.n	8003050 <RCCEx_PLLSAI2_Config+0x74>
 800303c:	e020      	b.n	8003080 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800303e:	4b55      	ldr	r3, [pc, #340]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11d      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304e:	e01a      	b.n	8003086 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003050:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e013      	b.n	800308a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003062:	4b4c      	ldr	r3, [pc, #304]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800306e:	4b49      	ldr	r3, [pc, #292]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800307e:	e006      	b.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      break;
 8003084:	e004      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003086:	bf00      	nop
 8003088:	e002      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003096:	4b3f      	ldr	r3, [pc, #252]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	430b      	orrs	r3, r1
 80030ac:	4939      	ldr	r1, [pc, #228]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d167      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fe f9d0 	bl	8001468 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ca:	e009      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030cc:	f7fe f9cc 	bl	8001468 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	73fb      	strb	r3, [r7, #15]
        break;
 80030de:	e005      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d14a      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	0211      	lsls	r1, r2, #8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	0912      	lsrs	r2, r2, #4
 8003110:	0452      	lsls	r2, r2, #17
 8003112:	430a      	orrs	r2, r1
 8003114:	491f      	ldr	r1, [pc, #124]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	614b      	str	r3, [r1, #20]
 800311a:	e011      	b.n	8003140 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800311c:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003124:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	0211      	lsls	r1, r2, #8
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6912      	ldr	r2, [r2, #16]
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0652      	lsls	r2, r2, #25
 8003138:	430a      	orrs	r2, r1
 800313a:	4916      	ldr	r1, [pc, #88]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe f98c 	bl	8001468 <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003152:	e009      	b.n	8003168 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003154:	f7fe f988 	bl	8001468 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d902      	bls.n	8003168 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	73fb      	strb	r3, [r7, #15]
          break;
 8003166:	e005      	b.n	8003174 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4904      	ldr	r1, [pc, #16]	@ (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e040      	b.n	800322c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f80a 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 ffa4 	bl	800412c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fce9 	bl	8003bbc <UART_SetConfig>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e01b      	b.n	800322c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 f823 	bl	8004270 <UART_CheckIdleState>
 800322a:	4603      	mov	r3, r0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003248:	2b20      	cmp	r3, #32
 800324a:	d177      	bne.n	800333c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_UART_Transmit+0x24>
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e070      	b.n	800333e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	@ 0x21
 8003268:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326a:	f7fe f8fd 	bl	8001468 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d108      	bne.n	800329c <HAL_UART_Transmit+0x68>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e003      	b.n	80032a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032a4:	e02f      	b.n	8003306 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	@ 0x80
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f001 f885 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e03b      	b.n	800333e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d8:	b292      	uxth	r2, r2
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	3302      	adds	r3, #2
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e007      	b.n	80032f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1c9      	bne.n	80032a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2140      	movs	r1, #64	@ 0x40
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f001 f84f 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e005      	b.n	800333e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08a      	sub	sp, #40	@ 0x28
 800334a:	af02      	add	r7, sp, #8
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 80b6 	bne.w	80034ce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Receive+0x28>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0ae      	b.n	80034d0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2222      	movs	r2, #34	@ 0x22
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003388:	f7fe f86e 	bl	8001468 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	d10e      	bne.n	80033c6 <HAL_UART_Receive+0x80>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_UART_Receive+0x76>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80033b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033ba:	e02d      	b.n	8003418 <HAL_UART_Receive+0xd2>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	22ff      	movs	r2, #255	@ 0xff
 80033c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033c4:	e028      	b.n	8003418 <HAL_UART_Receive+0xd2>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_UART_Receive+0xa4>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_UART_Receive+0x9a>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	@ 0xff
 80033da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033de:	e01b      	b.n	8003418 <HAL_UART_Receive+0xd2>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	227f      	movs	r2, #127	@ 0x7f
 80033e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033e8:	e016      	b.n	8003418 <HAL_UART_Receive+0xd2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033f2:	d10d      	bne.n	8003410 <HAL_UART_Receive+0xca>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <HAL_UART_Receive+0xc0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	227f      	movs	r2, #127	@ 0x7f
 8003400:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003404:	e008      	b.n	8003418 <HAL_UART_Receive+0xd2>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	223f      	movs	r2, #63	@ 0x3f
 800340a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800340e:	e003      	b.n	8003418 <HAL_UART_Receive+0xd2>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800341e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003428:	d108      	bne.n	800343c <HAL_UART_Receive+0xf6>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e003      	b.n	8003444 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003444:	e037      	b.n	80034b6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2120      	movs	r1, #32
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 ffb5 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e033      	b.n	80034d0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003474:	b29a      	uxth	r2, r3
 8003476:	8a7b      	ldrh	r3, [r7, #18]
 8003478:	4013      	ands	r3, r2
 800347a:	b29a      	uxth	r2, r3
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	3302      	adds	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e00d      	b.n	80034a4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8a7b      	ldrh	r3, [r7, #18]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4013      	ands	r3, r2
 8003498:	b2da      	uxtb	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1c1      	bne.n	8003446 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d137      	bne.n	8003560 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_UART_Receive_IT+0x24>
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e030      	b.n	8003562 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_UART_Receive_IT+0x94>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01f      	beq.n	8003550 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	613b      	str	r3, [r7, #16]
   return(result);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	61bb      	str	r3, [r7, #24]
   return(result);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e6      	bne.n	800351e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	461a      	mov	r2, r3
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 ffa0 	bl	800449c <UART_Start_Receive_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	e000      	b.n	8003562 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3728      	adds	r7, #40	@ 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40008000 	.word	0x40008000

08003570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0ba      	sub	sp, #232	@ 0xe8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800359a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800359e:	4013      	ands	r3, r2
 80035a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d115      	bne.n	80035d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00f      	beq.n	80035d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 82ca 	beq.w	8003b62 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
      }
      return;
 80035d6:	e2c4      	b.n	8003b62 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80035d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8117 	beq.w	8003810 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035f2:	4b85      	ldr	r3, [pc, #532]	@ (8003808 <HAL_UART_IRQHandler+0x298>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 810a 	beq.w	8003810 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d011      	beq.n	800362c <HAL_UART_IRQHandler+0xbc>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d011      	beq.n	800365c <HAL_UART_IRQHandler+0xec>
 8003638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2202      	movs	r2, #2
 800364a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d011      	beq.n	800368c <HAL_UART_IRQHandler+0x11c>
 8003668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2204      	movs	r2, #4
 800367a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003682:	f043 0202 	orr.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	f043 0208 	orr.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <HAL_UART_IRQHandler+0x18a>
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8230 	beq.w	8003b66 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003734:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04f      	beq.n	80037f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 ff68 	bl	8004628 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003762:	2b40      	cmp	r3, #64	@ 0x40
 8003764:	d141      	bne.n	80037ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800377c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3308      	adds	r3, #8
 800378e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800379e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1d9      	bne.n	8003766 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d013      	beq.n	80037e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	4a13      	ldr	r2, [pc, #76]	@ (800380c <HAL_UART_IRQHandler+0x29c>)
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd ffa9 	bl	800171e <HAL_DMA_Abort_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037dc:	4610      	mov	r0, r2
 80037de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	e00f      	b.n	8003802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9d4 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	e00b      	b.n	8003802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9d0 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e007      	b.n	8003802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9cc 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003800:	e1b1      	b.n	8003b66 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003802:	bf00      	nop
    return;
 8003804:	e1af      	b.n	8003b66 <HAL_UART_IRQHandler+0x5f6>
 8003806:	bf00      	nop
 8003808:	04000120 	.word	0x04000120
 800380c:	080046f1 	.word	0x080046f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 816a 	bne.w	8003aee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8163 	beq.w	8003aee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 815c 	beq.w	8003aee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2210      	movs	r2, #16
 800383c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b40      	cmp	r3, #64	@ 0x40
 800384a:	f040 80d4 	bne.w	80039f6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800385a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80ad 	beq.w	80039be <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800386e:	429a      	cmp	r2, r3
 8003870:	f080 80a5 	bcs.w	80039be <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800387a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 8086 	bne.w	800399c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1da      	bne.n	8003890 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3308      	adds	r3, #8
 80038fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003902:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003906:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e1      	bne.n	80038da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800392c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800393a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800393c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003940:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800396a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396c:	f023 0310 	bic.w	r3, r3, #16
 8003970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800397e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003980:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800398c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e4      	bne.n	800395c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fe83 	bl	80016a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8f4 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039bc:	e0d5      	b.n	8003b6a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 80ce 	bne.w	8003b6a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	f040 80c5 	bne.w	8003b6a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8d8 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
      return;
 80039f4:	e0b9      	b.n	8003b6a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80ab 	beq.w	8003b6e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a6 	beq.w	8003b6e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e4      	bne.n	8003a22 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	623b      	str	r3, [r7, #32]
   return(result);
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e3      	bne.n	8003a58 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e4      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f85c 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aec:	e03f      	b.n	8003b6e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_UART_IRQHandler+0x5a8>
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 ffe9 	bl	8004ae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b16:	e02d      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01c      	beq.n	8003b72 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
    }
    return;
 8003b40:	e017      	b.n	8003b72 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_UART_IRQHandler+0x604>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fdde 	bl	800471c <UART_EndTransmit_IT>
    return;
 8003b60:	e008      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
      return;
 8003b62:	bf00      	nop
 8003b64:	e006      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
    return;
 8003b66:	bf00      	nop
 8003b68:	e004      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
      return;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
      return;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_UART_IRQHandler+0x604>
    return;
 8003b72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b74:	37e8      	adds	r7, #232	@ 0xe8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop

08003b7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc0:	b08a      	sub	sp, #40	@ 0x28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4ba4      	ldr	r3, [pc, #656]	@ (8003e7c <UART_SetConfig+0x2c0>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a99      	ldr	r2, [pc, #612]	@ (8003e80 <UART_SetConfig+0x2c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	4313      	orrs	r3, r2
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a90      	ldr	r2, [pc, #576]	@ (8003e84 <UART_SetConfig+0x2c8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d126      	bne.n	8003c94 <UART_SetConfig+0xd8>
 8003c46:	4b90      	ldr	r3, [pc, #576]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d81b      	bhi.n	8003c8c <UART_SetConfig+0xd0>
 8003c54:	a201      	add	r2, pc, #4	@ (adr r2, 8003c5c <UART_SetConfig+0xa0>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c7d 	.word	0x08003c7d
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c85 	.word	0x08003c85
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e116      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003c74:	2302      	movs	r3, #2
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e112      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e10e      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003c84:	2308      	movs	r3, #8
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e10a      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c92:	e106      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a7c      	ldr	r2, [pc, #496]	@ (8003e8c <UART_SetConfig+0x2d0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d138      	bne.n	8003d10 <UART_SetConfig+0x154>
 8003c9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d82d      	bhi.n	8003d08 <UART_SetConfig+0x14c>
 8003cac:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <UART_SetConfig+0xf8>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003d09 	.word	0x08003d09
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d09 	.word	0x08003d09
 8003cd0:	08003d09 	.word	0x08003d09
 8003cd4:	08003cf1 	.word	0x08003cf1
 8003cd8:	08003d09 	.word	0x08003d09
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003d09 	.word	0x08003d09
 8003ce4:	08003d01 	.word	0x08003d01
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e0d8      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e0d4      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e0d0      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d00:	2308      	movs	r3, #8
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e0cc      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0e:	e0c8      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5e      	ldr	r2, [pc, #376]	@ (8003e90 <UART_SetConfig+0x2d4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d125      	bne.n	8003d66 <UART_SetConfig+0x1aa>
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d016      	beq.n	8003d56 <UART_SetConfig+0x19a>
 8003d28:	2b30      	cmp	r3, #48	@ 0x30
 8003d2a:	d818      	bhi.n	8003d5e <UART_SetConfig+0x1a2>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d00a      	beq.n	8003d46 <UART_SetConfig+0x18a>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d814      	bhi.n	8003d5e <UART_SetConfig+0x1a2>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <UART_SetConfig+0x182>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d008      	beq.n	8003d4e <UART_SetConfig+0x192>
 8003d3c:	e00f      	b.n	8003d5e <UART_SetConfig+0x1a2>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d44:	e0ad      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d46:	2302      	movs	r3, #2
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4c:	e0a9      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d54:	e0a5      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d56:	2308      	movs	r3, #8
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5c:	e0a1      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d5e:	2310      	movs	r3, #16
 8003d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d64:	e09d      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e94 <UART_SetConfig+0x2d8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d125      	bne.n	8003dbc <UART_SetConfig+0x200>
 8003d70:	4b45      	ldr	r3, [pc, #276]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d7c:	d016      	beq.n	8003dac <UART_SetConfig+0x1f0>
 8003d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d80:	d818      	bhi.n	8003db4 <UART_SetConfig+0x1f8>
 8003d82:	2b80      	cmp	r3, #128	@ 0x80
 8003d84:	d00a      	beq.n	8003d9c <UART_SetConfig+0x1e0>
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d814      	bhi.n	8003db4 <UART_SetConfig+0x1f8>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <UART_SetConfig+0x1d8>
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d008      	beq.n	8003da4 <UART_SetConfig+0x1e8>
 8003d92:	e00f      	b.n	8003db4 <UART_SetConfig+0x1f8>
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e082      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e07e      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003da4:	2304      	movs	r3, #4
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e07a      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003dac:	2308      	movs	r3, #8
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e076      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003db4:	2310      	movs	r3, #16
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e072      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a35      	ldr	r2, [pc, #212]	@ (8003e98 <UART_SetConfig+0x2dc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d12a      	bne.n	8003e1c <UART_SetConfig+0x260>
 8003dc6:	4b30      	ldr	r3, [pc, #192]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd4:	d01a      	beq.n	8003e0c <UART_SetConfig+0x250>
 8003dd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dda:	d81b      	bhi.n	8003e14 <UART_SetConfig+0x258>
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de0:	d00c      	beq.n	8003dfc <UART_SetConfig+0x240>
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de6:	d815      	bhi.n	8003e14 <UART_SetConfig+0x258>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <UART_SetConfig+0x238>
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df0:	d008      	beq.n	8003e04 <UART_SetConfig+0x248>
 8003df2:	e00f      	b.n	8003e14 <UART_SetConfig+0x258>
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e052      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e02:	e04e      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e04:	2304      	movs	r3, #4
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e04a      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e046      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e14:	2310      	movs	r3, #16
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e042      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <UART_SetConfig+0x2c4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d13a      	bne.n	8003e9c <UART_SetConfig+0x2e0>
 8003e26:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <UART_SetConfig+0x2cc>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e34:	d01a      	beq.n	8003e6c <UART_SetConfig+0x2b0>
 8003e36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e3a:	d81b      	bhi.n	8003e74 <UART_SetConfig+0x2b8>
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e40:	d00c      	beq.n	8003e5c <UART_SetConfig+0x2a0>
 8003e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e46:	d815      	bhi.n	8003e74 <UART_SetConfig+0x2b8>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <UART_SetConfig+0x298>
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e50:	d008      	beq.n	8003e64 <UART_SetConfig+0x2a8>
 8003e52:	e00f      	b.n	8003e74 <UART_SetConfig+0x2b8>
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e022      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e01e      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e64:	2304      	movs	r3, #4
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e01a      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e016      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e012      	b.n	8003ea2 <UART_SetConfig+0x2e6>
 8003e7c:	efff69f3 	.word	0xefff69f3
 8003e80:	40008000 	.word	0x40008000
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	40004800 	.word	0x40004800
 8003e94:	40004c00 	.word	0x40004c00
 8003e98:	40005000 	.word	0x40005000
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a9f      	ldr	r2, [pc, #636]	@ (8004124 <UART_SetConfig+0x568>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d17a      	bne.n	8003fa2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d824      	bhi.n	8003efe <UART_SetConfig+0x342>
 8003eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ebc <UART_SetConfig+0x300>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003eff 	.word	0x08003eff
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003eff 	.word	0x08003eff
 8003ecc:	08003eef 	.word	0x08003eef
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003eff 	.word	0x08003eff
 8003edc:	08003ef7 	.word	0x08003ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7fe fc12 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003ee4:	61f8      	str	r0, [r7, #28]
        break;
 8003ee6:	e010      	b.n	8003f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8004128 <UART_SetConfig+0x56c>)
 8003eea:	61fb      	str	r3, [r7, #28]
        break;
 8003eec:	e00d      	b.n	8003f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eee:	f7fe fb73 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8003ef2:	61f8      	str	r0, [r7, #28]
        break;
 8003ef4:	e009      	b.n	8003f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003efa:	61fb      	str	r3, [r7, #28]
        break;
 8003efc:	e005      	b.n	8003f0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80fb 	beq.w	8004108 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d305      	bcc.n	8003f2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d903      	bls.n	8003f36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f34:	e0e8      	b.n	8004108 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	022b      	lsls	r3, r5, #8
 8003f48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f4c:	0222      	lsls	r2, r4, #8
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	6849      	ldr	r1, [r1, #4]
 8003f52:	0849      	lsrs	r1, r1, #1
 8003f54:	2000      	movs	r0, #0
 8003f56:	4688      	mov	r8, r1
 8003f58:	4681      	mov	r9, r0
 8003f5a:	eb12 0a08 	adds.w	sl, r2, r8
 8003f5e:	eb43 0b09 	adc.w	fp, r3, r9
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f70:	4650      	mov	r0, sl
 8003f72:	4659      	mov	r1, fp
 8003f74:	f7fc f928 	bl	80001c8 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f86:	d308      	bcc.n	8003f9a <UART_SetConfig+0x3de>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8e:	d204      	bcs.n	8003f9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	e0b6      	b.n	8004108 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa0:	e0b2      	b.n	8004108 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003faa:	d15e      	bne.n	800406a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d828      	bhi.n	8004006 <UART_SetConfig+0x44a>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x400>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fb92 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e014      	b.n	8004012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fba4 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <UART_SetConfig+0x56c>)
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe faef 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d077      	beq.n	8004108 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005a      	lsls	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d916      	bls.n	8004062 <UART_SetConfig+0x4a6>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403a:	d212      	bcs.n	8004062 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	b29a      	uxth	r2, r3
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	4313      	orrs	r3, r2
 8004056:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	8afa      	ldrh	r2, [r7, #22]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e052      	b.n	8004108 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004068:	e04e      	b.n	8004108 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800406a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800406e:	2b08      	cmp	r3, #8
 8004070:	d827      	bhi.n	80040c2 <UART_SetConfig+0x506>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <UART_SetConfig+0x4bc>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	080040c3 	.word	0x080040c3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040c3 	.word	0x080040c3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fb34 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e014      	b.n	80040ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe fb46 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 80040a8:	61f8      	str	r0, [r7, #28]
        break;
 80040aa:	e010      	b.n	80040ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <UART_SetConfig+0x56c>)
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e00d      	b.n	80040ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe fa91 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80040b6:	61f8      	str	r0, [r7, #28]
        break;
 80040b8:	e009      	b.n	80040ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040be:	61fb      	str	r3, [r7, #28]
        break;
 80040c0:	e005      	b.n	80040ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040cc:	bf00      	nop
    }

    if (pclk != 0U)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	085a      	lsrs	r2, r3, #1
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	441a      	add	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d909      	bls.n	8004102 <UART_SetConfig+0x546>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d205      	bcs.n	8004102 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e002      	b.n	8004108 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004114:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004118:	4618      	mov	r0, r3
 800411a:	3728      	adds	r7, #40	@ 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40008000 	.word	0x40008000
 8004128:	00f42400 	.word	0x00f42400

0800412c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800422a:	d10a      	bne.n	8004242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b098      	sub	sp, #96	@ 0x60
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004280:	f7fd f8f2 	bl	8001468 <HAL_GetTick>
 8004284:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d12e      	bne.n	80042f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429c:	2200      	movs	r2, #0
 800429e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f88c 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d021      	beq.n	80042f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e062      	b.n	80043b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d149      	bne.n	8004394 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004300:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004308:	2200      	movs	r2, #0
 800430a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f856 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03c      	beq.n	8004394 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	623b      	str	r3, [r7, #32]
   return(result);
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004338:	633b      	str	r3, [r7, #48]	@ 0x30
 800433a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800433e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e6      	bne.n	800431a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60fb      	str	r3, [r7, #12]
   return(result);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800436c:	61fa      	str	r2, [r7, #28]
 800436e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	617b      	str	r3, [r7, #20]
   return(result);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e011      	b.n	80043b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3758      	adds	r7, #88	@ 0x58
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e04f      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d04b      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fd f845 	bl	8001468 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e04e      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d037      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b80      	cmp	r3, #128	@ 0x80
 8004406:	d034      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b40      	cmp	r3, #64	@ 0x40
 800440c:	d031      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d110      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f8ff 	bl	8004628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2208      	movs	r2, #8
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e029      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444c:	d111      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8e5 	bl	8004628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e00f      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d0a0      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800449c:	b480      	push	{r7}
 800449e:	b097      	sub	sp, #92	@ 0x5c
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ce:	d10e      	bne.n	80044ee <UART_Start_Receive_IT+0x52>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <UART_Start_Receive_IT+0x48>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044e2:	e02d      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	22ff      	movs	r2, #255	@ 0xff
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044ec:	e028      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10d      	bne.n	8004512 <UART_Start_Receive_IT+0x76>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <UART_Start_Receive_IT+0x6c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22ff      	movs	r2, #255	@ 0xff
 8004502:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004506:	e01b      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	227f      	movs	r2, #127	@ 0x7f
 800450c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004510:	e016      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800451a:	d10d      	bne.n	8004538 <UART_Start_Receive_IT+0x9c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <UART_Start_Receive_IT+0x92>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	227f      	movs	r2, #127	@ 0x7f
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800452c:	e008      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	223f      	movs	r2, #63	@ 0x3f
 8004532:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004536:	e003      	b.n	8004540 <UART_Start_Receive_IT+0xa4>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2222      	movs	r2, #34	@ 0x22
 800454c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	657b      	str	r3, [r7, #84]	@ 0x54
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004570:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800457e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d107      	bne.n	800459e <UART_Start_Receive_IT+0x102>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a21      	ldr	r2, [pc, #132]	@ (8004620 <UART_Start_Receive_IT+0x184>)
 800459a:	669a      	str	r2, [r3, #104]	@ 0x68
 800459c:	e002      	b.n	80045a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a20      	ldr	r2, [pc, #128]	@ (8004624 <UART_Start_Receive_IT+0x188>)
 80045a2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d019      	beq.n	80045e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80045cc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <UART_Start_Receive_IT+0x110>
 80045de:	e018      	b.n	8004612 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	613b      	str	r3, [r7, #16]
   return(result);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f043 0320 	orr.w	r3, r3, #32
 80045f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	69f9      	ldr	r1, [r7, #28]
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	61bb      	str	r3, [r7, #24]
   return(result);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	375c      	adds	r7, #92	@ 0x5c
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	0800492d 	.word	0x0800492d
 8004624:	08004771 	.word	0x08004771

08004628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b095      	sub	sp, #84	@ 0x54
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004650:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e6      	bne.n	8004630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3308      	adds	r3, #8
 8004668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	61fb      	str	r3, [r7, #28]
   return(result);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469a:	2b01      	cmp	r3, #1
 800469c:	d118      	bne.n	80046d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e6      	bne.n	800469e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046e4:	bf00      	nop
 80046e6:	3754      	adds	r7, #84	@ 0x54
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff fa3e 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	60bb      	str	r3, [r7, #8]
   return(result);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fa0a 	bl	8003b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004768:	bf00      	nop
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b09c      	sub	sp, #112	@ 0x70
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800477e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004788:	2b22      	cmp	r3, #34	@ 0x22
 800478a:	f040 80be 	bne.w	800490a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004794:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800479c:	b2d9      	uxtb	r1, r3
 800479e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	400a      	ands	r2, r1
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 80a3 	bne.w	800491e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e6      	bne.n	80047d8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800481a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	667b      	str	r3, [r7, #100]	@ 0x64
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800482a:	647a      	str	r2, [r7, #68]	@ 0x44
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004830:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a34      	ldr	r2, [pc, #208]	@ (8004928 <UART_RxISR_8BIT+0x1b8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01f      	beq.n	800489c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	623b      	str	r3, [r7, #32]
   return(result);
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800487e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
 800488a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800488e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d12e      	bne.n	8004902 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	617b      	str	r3, [r7, #20]
   return(result);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d103      	bne.n	80048f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2210      	movs	r2, #16
 80048f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff f952 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004900:	e00d      	b.n	800491e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fb ff4e 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 8004908:	e009      	b.n	800491e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	8b1b      	ldrh	r3, [r3, #24]
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0208 	orr.w	r2, r2, #8
 800491a:	b292      	uxth	r2, r2
 800491c:	831a      	strh	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	3770      	adds	r7, #112	@ 0x70
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40008000 	.word	0x40008000

0800492c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b09c      	sub	sp, #112	@ 0x70
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800493a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004944:	2b22      	cmp	r3, #34	@ 0x22
 8004946:	f040 80be 	bne.w	8004ac6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004950:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800495a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800495e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004962:	4013      	ands	r3, r2
 8004964:	b29a      	uxth	r2, r3
 8004966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004968:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80a3 	bne.w	8004ada <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80049a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80049c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e6      	bne.n	8004994 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80049e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a34      	ldr	r2, [pc, #208]	@ (8004ae4 <UART_RxISR_16BIT+0x1b8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01f      	beq.n	8004a58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a46:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d12e      	bne.n	8004abe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f023 0310 	bic.w	r3, r3, #16
 8004a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	613b      	str	r3, [r7, #16]
   return(result);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e6      	bne.n	8004a66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d103      	bne.n	8004aae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff f874 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004abc:	e00d      	b.n	8004ada <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fb fe70 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 8004ac4:	e009      	b.n	8004ada <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	8b1b      	ldrh	r3, [r3, #24]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0208 	orr.w	r2, r2, #8
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	831a      	strh	r2, [r3, #24]
}
 8004ada:	bf00      	nop
 8004adc:	3770      	adds	r7, #112	@ 0x70
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40008000 	.word	0x40008000

08004ae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <memset>:
 8004afc:	4402      	add	r2, r0
 8004afe:	4603      	mov	r3, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	@ (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2600      	movs	r6, #0
 8004b18:	42a6      	cmp	r6, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f818 	bl	8004b54 <_init>
 8004b24:	1b64      	subs	r4, r4, r5
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2600      	movs	r6, #0
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b34:	4798      	blx	r3
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3e:	4798      	blx	r3
 8004b40:	3601      	adds	r6, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004cbc 	.word	0x08004cbc
 8004b48:	08004cbc 	.word	0x08004cbc
 8004b4c:	08004cbc 	.word	0x08004cbc
 8004b50:	08004cc0 	.word	0x08004cc0

08004b54 <_init>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr

08004b60 <_fini>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr
