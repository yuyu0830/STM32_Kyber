
AES_DPA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003f78  08003f78  00004f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c8  080040c8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080040dc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080040dc  000060b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbc  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  00011ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00013ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000771  00000000  00000000  00014698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fbd  00000000  00000000  00014e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c06d  00000000  00000000  00039dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e409b  00000000  00000000  00045e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d8  00000000  00000000  00129f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f60 	.word	0x08003f60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f60 	.word	0x08003f60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa32 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80e 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f88e 	bl	80005e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f85c 	bl	8000584 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	GetData();
 80004cc:	2202      	movs	r2, #2
 80004ce:	4902      	ldr	r1, [pc, #8]	@ (80004d8 <main+0x20>)
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <main+0x24>)
 80004d2:	f002 fa07 	bl	80028e4 <HAL_UART_Receive_IT>
 80004d6:	e7f9      	b.n	80004cc <main+0x14>
 80004d8:	200000b0 	.word	0x200000b0
 80004dc:	20000028 	.word	0x20000028

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b096      	sub	sp, #88	@ 0x58
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2244      	movs	r2, #68	@ 0x44
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fd0a 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000502:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000506:	f000 fe03 	bl	8001110 <HAL_PWREx_ControlVoltageScaling>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000510:	f000 f904 	bl	800071c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800051c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	2310      	movs	r3, #16
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800052e:	230a      	movs	r3, #10
 8000530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000532:	2307      	movs	r3, #7
 8000534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fe3a 	bl	80011bc <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800054e:	f000 f8e5 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2104      	movs	r1, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fa02 	bl	8001974 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000576:	f000 f8d1 	bl	800071c <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3758      	adds	r7, #88	@ 0x58
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 800058a:	4a15      	ldr	r2, [pc, #84]	@ (80005e0 <MX_USART2_UART_Init+0x5c>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <MX_USART2_UART_Init+0x58>)
 80005c8:	f002 f8b4 	bl	8002734 <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005d2:	f000 f8a3 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028
 80005e0:	40004400 	.word	0x40004400

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	@ 0x28
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_GPIO_Init+0xc8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a2b      	ldr	r2, [pc, #172]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a25      	ldr	r2, [pc, #148]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <MX_GPIO_Init+0xc8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a19      	ldr	r2, [pc, #100]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_GPIO_Init+0xc8>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 fd14 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0xcc>)
 8000680:	f000 fb5c 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trigger_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 8000684:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a0:	f000 fb4c 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	@ 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000800 	.word	0x48000800

080006b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	@ (8000708 <HAL_UART_RxCpltCallback+0x54>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d11c      	bne.n	8000700 <HAL_UART_RxCpltCallback+0x4c>
  {
    HAL_GPIO_TogglePin (GPIOA, Trigger_Pin);
 80006c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f000 fcf7 	bl	80010c0 <HAL_GPIO_TogglePin>

    result = sbox[byte[0] ^ byte[1]];
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <HAL_UART_RxCpltCallback+0x58>)
 80006d4:	781a      	ldrb	r2, [r3, #0]
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <HAL_UART_RxCpltCallback+0x58>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	4053      	eors	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_UART_RxCpltCallback+0x5c>)
 80006e2:	5c9a      	ldrb	r2, [r3, r2]
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <HAL_UART_RxCpltCallback+0x60>)
 80006e6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (GPIOA, Trigger_Pin);
 80006e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f000 fce6 	bl	80010c0 <HAL_GPIO_TogglePin>

    SendData();
 80006f4:	2364      	movs	r3, #100	@ 0x64
 80006f6:	2201      	movs	r2, #1
 80006f8:	4906      	ldr	r1, [pc, #24]	@ (8000714 <HAL_UART_RxCpltCallback+0x60>)
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <HAL_UART_RxCpltCallback+0x64>)
 80006fc:	f002 f868 	bl	80027d0 <HAL_UART_Transmit>

	//
  }
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40004400 	.word	0x40004400
 800070c:	200000b0 	.word	0x200000b0
 8000710:	08003f78 	.word	0x08003f78
 8000714:	200000b2 	.word	0x200000b2
 8000718:	20000028 	.word	0x20000028

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	@ 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	@ 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0ac      	sub	sp, #176	@ 0xb0
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2288      	movs	r2, #136	@ 0x88
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f003 fbb9 	bl	8003f08 <memset>
  if(huart->Instance==USART2)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a25      	ldr	r2, [pc, #148]	@ (8000830 <HAL_UART_MspInit+0xc0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d143      	bne.n	8000828 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fb05 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007b8:	f7ff ffb0 	bl	800071c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d8:	4a16      	ldr	r2, [pc, #88]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_UART_MspInit+0xc4>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ec:	230c      	movs	r3, #12
 80007ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000804:	2307      	movs	r3, #7
 8000806:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000814:	f000 fa92 	bl	8000d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2026      	movs	r0, #38	@ 0x26
 800081e:	f000 f9d8 	bl	8000bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000822:	2026      	movs	r0, #38	@ 0x26
 8000824:	f000 f9f1 	bl	8000c0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000828:	bf00      	nop
 800082a:	37b0      	adds	r7, #176	@ 0xb0
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <MemManage_Handler+0x4>

08000850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088e:	f000 f8a5 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <USART2_IRQHandler+0x10>)
 800089e:	f002 f86d 	bl	800297c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff ffea 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	@ (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f003 fb0b 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fdd9 	bl	80004b8 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000908:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	080040d0 	.word	0x080040d0
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	200000b8 	.word	0x200000b8

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_Init+0x3c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <HAL_Init+0x3c>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f93e 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f80f 	bl	8000964 <HAL_InitTick>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	e001      	b.n	8000956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000952:	f7ff fee9 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000956:	79fb      	ldrb	r3, [r7, #7]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d023      	beq.n	80009c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <HAL_InitTick+0x70>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f949 	bl	8000c26 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d809      	bhi.n	80009b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f913 	bl	8000bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_InitTick+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e001      	b.n	80009c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	200000b4 	.word	0x200000b4

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200000b4 	.word	0x200000b4

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	@ (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	@ (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	@ 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff8e 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff29 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff3e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff8e 	bl	8000b10 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff31 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d008      	beq.n	8000c68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e022      	b.n	8000cae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 020e 	bic.w	r2, r2, #14
 8000c76:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8c:	f003 021c 	and.w	r2, r3, #28
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	2101      	movs	r1, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d005      	beq.n	8000cde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e029      	b.n	8000d32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 020e 	bic.w	r2, r2, #14
 8000cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	f003 021c 	and.w	r2, r3, #28
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	4798      	blx	r3
    }
  }
  return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e17f      	b.n	800104c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8171 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d118      	bne.n	8000e1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ac 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b5f      	ldr	r3, [pc, #380]	@ (800106c <HAL_GPIO_Init+0x330>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800106c <HAL_GPIO_Init+0x330>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efa:	4b5c      	ldr	r3, [pc, #368]	@ (800106c <HAL_GPIO_Init+0x330>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f06:	4a5a      	ldr	r2, [pc, #360]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x242>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	@ (8001074 <HAL_GPIO_Init+0x338>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x23e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001078 <HAL_GPIO_Init+0x33c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x23a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	@ (800107c <HAL_GPIO_Init+0x340>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x236>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001080 <HAL_GPIO_Init+0x344>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x232>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	@ (8001084 <HAL_GPIO_Init+0x348>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x22e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001088 <HAL_GPIO_Init+0x34c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x22a>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f90:	4937      	ldr	r1, [pc, #220]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fec:	4a27      	ldr	r2, [pc, #156]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001016:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_GPIO_Init+0x350>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_GPIO_Init+0x350>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <HAL_GPIO_Init+0x350>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f ae78 	bne.w	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	48001400 	.word	0x48001400
 8001088:	48001800 	.word	0x48001800
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43d9      	mvns	r1, r3
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	400b      	ands	r3, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HAL_PWREx_GetVoltageRange+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800111e:	d130      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112c:	d038      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2232      	movs	r2, #50	@ 0x32
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	e002      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001168:	d102      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117c:	d110      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e00f      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118e:	d007      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001198:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83

080011bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e3ca      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ce:	4b97      	ldr	r3, [pc, #604]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d8:	4b94      	ldr	r3, [pc, #592]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80e4 	beq.w	80013b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_OscConfig+0x4a>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	f040 808b 	bne.w	8001314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b01      	cmp	r3, #1
 8001202:	f040 8087 	bne.w	8001314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001206:	4b89      	ldr	r3, [pc, #548]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x62>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e3a2      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	4b82      	ldr	r3, [pc, #520]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_RCC_OscConfig+0x7c>
 800122e:	4b7f      	ldr	r3, [pc, #508]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001236:	e005      	b.n	8001244 <HAL_RCC_OscConfig+0x88>
 8001238:	4b7c      	ldr	r3, [pc, #496]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001244:	4293      	cmp	r3, r2
 8001246:	d223      	bcs.n	8001290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fd55 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e383      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4b73      	ldr	r3, [pc, #460]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a72      	ldr	r2, [pc, #456]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b70      	ldr	r3, [pc, #448]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	496d      	ldr	r1, [pc, #436]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b6c      	ldr	r3, [pc, #432]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4968      	ldr	r1, [pc, #416]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e025      	b.n	80012dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001290:	4b66      	ldr	r3, [pc, #408]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a65      	ldr	r2, [pc, #404]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4960      	ldr	r1, [pc, #384]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ae:	4b5f      	ldr	r3, [pc, #380]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	495b      	ldr	r1, [pc, #364]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fd15 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e343      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012dc:	f000 fc4a 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b52      	ldr	r3, [pc, #328]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	4950      	ldr	r1, [pc, #320]	@ (8001430 <HAL_RCC_OscConfig+0x274>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <HAL_RCC_OscConfig+0x278>)
 80012fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001438 <HAL_RCC_OscConfig+0x27c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb2f 	bl	8000964 <HAL_InitTick>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d052      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	e327      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d032      	beq.n	8001382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a42      	ldr	r2, [pc, #264]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb6c 	bl	8000a04 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fb68 	bl	8000a04 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e310      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b37      	ldr	r3, [pc, #220]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a36      	ldr	r2, [pc, #216]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4931      	ldr	r1, [pc, #196]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	492c      	ldr	r1, [pc, #176]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e01a      	b.n	80013b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb39 	bl	8000a04 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001396:	f7ff fb35 	bl	8000a04 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2dd      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x1da>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d074      	beq.n	80014ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x21a>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	d10e      	bne.n	80013ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d10b      	bne.n	80013ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d064      	beq.n	80014ac <HAL_RCC_OscConfig+0x2f0>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d160      	bne.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e2ba      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x24a>
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e026      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800140e:	d115      	bne.n	800143c <HAL_RCC_OscConfig+0x280>
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001416:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a02      	ldr	r2, [pc, #8]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e014      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	08004078 	.word	0x08004078
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
 800143c:	4ba0      	ldr	r3, [pc, #640]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a9f      	ldr	r2, [pc, #636]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b9d      	ldr	r3, [pc, #628]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a9c      	ldr	r2, [pc, #624]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fad2 	bl	8000a04 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff face 	bl	8000a04 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e276      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	4b92      	ldr	r3, [pc, #584]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x2a8>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fabe 	bl	8000a04 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff faba 	bl	8000a04 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e262      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x2d0>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d060      	beq.n	800157c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x310>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d116      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	4b7c      	ldr	r3, [pc, #496]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x328>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e23f      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	4973      	ldr	r1, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f8:	e040      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d023      	beq.n	800154a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001502:	4b6f      	ldr	r3, [pc, #444]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fa79 	bl	8000a04 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fa75 	bl	8000a04 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e21d      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b65      	ldr	r3, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b62      	ldr	r3, [pc, #392]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	495f      	ldr	r1, [pc, #380]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fa55 	bl	8000a04 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fa51 	bl	8000a04 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1f9      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03c      	beq.n	8001602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01c      	beq.n	80015ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001590:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001596:	4a4a      	ldr	r2, [pc, #296]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fa30 	bl	8000a04 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa2c 	bl	8000a04 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1d4      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ef      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 80015c8:	e01b      	b.n	8001602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d0:	4a3b      	ldr	r2, [pc, #236]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fa13 	bl	8000a04 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fa0f 	bl	8000a04 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1b7      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ef      	bne.n	80015e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80a6 	beq.w	800175c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001624:	4a26      	ldr	r2, [pc, #152]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6593      	str	r3, [r2, #88]	@ 0x58
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001638:	2301      	movs	r3, #1
 800163a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d118      	bne.n	800167a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001654:	f7ff f9d6 	bl	8000a04 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff f9d2 	bl	8000a04 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e17a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x4d8>
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001692:	e029      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d115      	bne.n	80016c8 <HAL_RCC_OscConfig+0x50c>
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a2:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b2:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	4b9c      	ldr	r3, [pc, #624]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ce:	4a9b      	ldr	r2, [pc, #620]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d8:	4b98      	ldr	r3, [pc, #608]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016de:	4a97      	ldr	r2, [pc, #604]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d016      	beq.n	800171e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff f988 	bl	8000a04 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff f984 	bl	8000a04 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e12a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	4b8b      	ldr	r3, [pc, #556]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ed      	beq.n	80016f8 <HAL_RCC_OscConfig+0x53c>
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff f971 	bl	8000a04 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff f96d 	bl	8000a04 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e113      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ed      	bne.n	8001726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b7a      	ldr	r3, [pc, #488]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	4a79      	ldr	r2, [pc, #484]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80fe 	beq.w	8001962 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	2b02      	cmp	r3, #2
 800176c:	f040 80d0 	bne.w	8001910 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001770:	4b72      	ldr	r3, [pc, #456]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	429a      	cmp	r2, r3
 8001782:	d130      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	3b01      	subs	r3, #1
 8001790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d127      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d11f      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017b0:	2a07      	cmp	r2, #7
 80017b2:	bf14      	ite	ne
 80017b4:	2201      	movne	r2, #1
 80017b6:	2200      	moveq	r2, #0
 80017b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d113      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	3b01      	subs	r3, #1
 80017cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d06e      	beq.n	80018c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d069      	beq.n	80018c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0ad      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4b      	ldr	r2, [pc, #300]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800180e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001814:	f7ff f8f6 	bl	8000a04 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff f8f2 	bl	8000a04 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e09a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183a:	4b40      	ldr	r3, [pc, #256]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_RCC_OscConfig+0x784>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800184a:	3a01      	subs	r2, #1
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001854:	0212      	lsls	r2, r2, #8
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800185c:	0852      	lsrs	r2, r2, #1
 800185e:	3a01      	subs	r2, #1
 8001860:	0552      	lsls	r2, r2, #21
 8001862:	4311      	orrs	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001868:	0852      	lsrs	r2, r2, #1
 800186a:	3a01      	subs	r2, #1
 800186c:	0652      	lsls	r2, r2, #25
 800186e:	4311      	orrs	r1, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001874:	0912      	lsrs	r2, r2, #4
 8001876:	0452      	lsls	r2, r2, #17
 8001878:	430a      	orrs	r2, r1
 800187a:	4930      	ldr	r1, [pc, #192]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a2a      	ldr	r2, [pc, #168]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001898:	f7ff f8b4 	bl	8000a04 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f8b0 	bl	8000a04 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e058      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018be:	e050      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04f      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d148      	bne.n	8001962 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a16      	ldr	r2, [pc, #88]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e8:	f7ff f88c 	bl	8000a04 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f888 	bl	8000a04 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e030      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x734>
 800190e:	e028      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d023      	beq.n	800195e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_RCC_OscConfig+0x780>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f86f 	bl	8000a04 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e00c      	b.n	8001944 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f86b 	bl	8000a04 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d905      	bls.n	8001944 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e013      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
 800193c:	40021000 	.word	0x40021000
 8001940:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ec      	bne.n	800192a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4905      	ldr	r1, [pc, #20]	@ (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x7b4>)
 8001958:	4013      	ands	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
 800195c:	e001      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	feeefffc 	.word	0xfeeefffc

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0e7      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b75      	ldr	r3, [pc, #468]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b72      	ldr	r3, [pc, #456]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4970      	ldr	r1, [pc, #448]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cf      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4960      	ldr	r1, [pc, #384]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0a6      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e09a      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e086      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b46      	ldr	r3, [pc, #280]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4943      	ldr	r1, [pc, #268]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5c:	f7fe ffd2 	bl	8000a04 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe ffce 	bl	8000a04 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d208      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	492b      	ldr	r1, [pc, #172]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aba:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d210      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 0207 	bic.w	r2, r3, #7
 8001ad0:	4923      	ldr	r1, [pc, #140]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e036      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4918      	ldr	r1, [pc, #96]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4910      	ldr	r1, [pc, #64]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b28:	f000 f824 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	490b      	ldr	r1, [pc, #44]	@ (8001b68 <HAL_RCC_ClockConfig+0x1f4>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_ClockConfig+0x1fc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe ff09 	bl	8000964 <HAL_InitTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b56:	7afb      	ldrb	r3, [r7, #11]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08004078 	.word	0x08004078
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b3e      	ldr	r3, [pc, #248]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d121      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11e      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb4:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d134      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0xac>
 8001c18:	e005      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	617b      	str	r3, [r7, #20]
      break;
 8001c24:	e002      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	3301      	adds	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0e5b      	lsrs	r3, r3, #25
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08004090 	.word	0x08004090
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4904      	ldr	r1, [pc, #16]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08004088 	.word	0x08004088

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd4:	f7ff ffda 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4904      	ldr	r1, [pc, #16]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08004088 	.word	0x08004088

08001cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d14:	f7ff f9ee 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001d18:	6178      	str	r0, [r7, #20]
 8001d1a:	e014      	b.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d34:	f7ff f9de 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4c:	d10b      	bne.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	@ 0x80
 8001d52:	d919      	bls.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d58:	d902      	bls.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e013      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e010      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b80      	cmp	r3, #128	@ 0x80
 8001d6a:	d902      	bls.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e00a      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	@ 0x80
 8001d76:	d102      	bne.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e004      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b70      	cmp	r3, #112	@ 0x70
 8001d82:	d101      	bne.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0207 	bic.w	r2, r3, #7
 8001d90:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d041      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ddc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001de0:	d02a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001de2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001de6:	d824      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001de8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dec:	d008      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df2:	d81e      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dfe:	e018      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e00:	4b86      	ldr	r3, [pc, #536]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a85      	ldr	r2, [pc, #532]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e015      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fabb 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e1e:	e00c      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3320      	adds	r3, #32
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fba6 	bl	8002578 <RCCEx_PLLSAI2_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e30:	e003      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	74fb      	strb	r3, [r7, #19]
      break;
 8001e36:	e000      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e40:	4b76      	ldr	r3, [pc, #472]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e4e:	4973      	ldr	r1, [pc, #460]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e56:	e001      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d041      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e70:	d02a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e76:	d824      	bhi.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e7c:	d008      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e82:	d81e      	bhi.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a61      	ldr	r2, [pc, #388]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e015      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fa73 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eae:	e00c      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fb5e 	bl	8002578 <RCCEx_PLLSAI2_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec0:	e003      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ec6:	e000      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed0:	4b52      	ldr	r3, [pc, #328]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ede:	494f      	ldr	r1, [pc, #316]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ee6:	e001      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a0 	beq.w	800203a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efe:	4b47      	ldr	r3, [pc, #284]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	4a40      	ldr	r2, [pc, #256]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fd62 	bl	8000a04 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f42:	e009      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7fe fd5e 	bl	8000a04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d902      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	74fb      	strb	r3, [r7, #19]
        break;
 8001f56:	e005      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ef      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d15c      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01f      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d019      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fb4:	4a19      	ldr	r2, [pc, #100]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fd1d 	bl	8000a04 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fd19 	bl	8000a04 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d902      	bls.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fe4:	e006      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ec      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200a:	4904      	ldr	r1, [pc, #16]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002012:	e009      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
 8002018:	e006      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002028:	7c7b      	ldrb	r3, [r7, #17]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b9e      	ldr	r3, [pc, #632]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a9d      	ldr	r2, [pc, #628]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002046:	4b98      	ldr	r3, [pc, #608]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 0203 	bic.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	4994      	ldr	r1, [pc, #592]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002068:	4b8f      	ldr	r3, [pc, #572]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 020c 	bic.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	498c      	ldr	r1, [pc, #560]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208a:	4b87      	ldr	r3, [pc, #540]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	4983      	ldr	r1, [pc, #524]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020ac:	4b7e      	ldr	r3, [pc, #504]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	497b      	ldr	r1, [pc, #492]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ce:	4b76      	ldr	r3, [pc, #472]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020dc:	4972      	ldr	r1, [pc, #456]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f0:	4b6d      	ldr	r3, [pc, #436]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	496a      	ldr	r1, [pc, #424]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b65      	ldr	r3, [pc, #404]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	4961      	ldr	r1, [pc, #388]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002134:	4b5c      	ldr	r3, [pc, #368]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	4959      	ldr	r1, [pc, #356]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002156:	4b54      	ldr	r3, [pc, #336]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002164:	4950      	ldr	r1, [pc, #320]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002178:	4b4b      	ldr	r3, [pc, #300]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	4948      	ldr	r1, [pc, #288]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219a:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	493f      	ldr	r1, [pc, #252]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d028      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021bc:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ca:	4937      	ldr	r1, [pc, #220]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021da:	d106      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b32      	ldr	r3, [pc, #200]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
 80021e8:	e011      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021f2:	d10c      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8c8 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002228:	491f      	ldr	r1, [pc, #124]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002238:	d106      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a1a      	ldr	r2, [pc, #104]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	e011      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f899 	bl	8002390 <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02b      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002296:	d109      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a02      	ldr	r2, [pc, #8]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
 80022a4:	e014      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f867 	bl	8002390 <RCCEx_PLLSAI1_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d02f      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022ea:	4928      	ldr	r1, [pc, #160]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fa:	d10d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f844 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
 8002316:	e011      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800231c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002320:	d10c      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3320      	adds	r3, #32
 8002326:	2102      	movs	r1, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f925 	bl	8002578 <RCCEx_PLLSAI2_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002356:	490d      	ldr	r1, [pc, #52]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002370:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800237a:	4904      	ldr	r1, [pc, #16]	@ (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002382:	7cbb      	ldrb	r3, [r7, #18]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800239e:	4b75      	ldr	r3, [pc, #468]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023aa:	4b72      	ldr	r3, [pc, #456]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10d      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
       ||
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
       ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d047      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e044      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d018      	beq.n	8002416 <RCCEx_PLLSAI1_Config+0x86>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d825      	bhi.n	8002434 <RCCEx_PLLSAI1_Config+0xa4>
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d002      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x62>
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d009      	beq.n	8002404 <RCCEx_PLLSAI1_Config+0x74>
 80023f0:	e020      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023f2:	4b60      	ldr	r3, [pc, #384]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11d      	bne.n	800243a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e01a      	b.n	800243a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002404:	4b5b      	ldr	r3, [pc, #364]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d116      	bne.n	800243e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e013      	b.n	800243e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002416:	4b57      	ldr	r3, [pc, #348]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002422:	4b54      	ldr	r3, [pc, #336]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002432:	e006      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e004      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002442:	bf00      	nop
    }

    if(status == HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800244a:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	430b      	orrs	r3, r1
 8002460:	4944      	ldr	r1, [pc, #272]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d17d      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800246c:	4b41      	ldr	r3, [pc, #260]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a40      	ldr	r2, [pc, #256]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7fe fac4 	bl	8000a04 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800247e:	e009      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002480:	f7fe fac0 	bl	8000a04 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d902      	bls.n	8002494 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	73fb      	strb	r3, [r7, #15]
        break;
 8002492:	e005      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002494:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ef      	bne.n	8002480 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d160      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ac:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6892      	ldr	r2, [r2, #8]
 80024bc:	0211      	lsls	r1, r2, #8
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	0912      	lsrs	r2, r2, #4
 80024c4:	0452      	lsls	r2, r2, #17
 80024c6:	430a      	orrs	r2, r1
 80024c8:	492a      	ldr	r1, [pc, #168]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	610b      	str	r3, [r1, #16]
 80024ce:	e027      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d112      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d6:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6892      	ldr	r2, [r2, #8]
 80024e6:	0211      	lsls	r1, r2, #8
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6912      	ldr	r2, [r2, #16]
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	3a01      	subs	r2, #1
 80024f0:	0552      	lsls	r2, r2, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	491f      	ldr	r1, [pc, #124]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]
 80024fa:	e011      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002504:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	0211      	lsls	r1, r2, #8
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6952      	ldr	r2, [r2, #20]
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0652      	lsls	r2, r2, #25
 8002518:	430a      	orrs	r2, r1
 800251a:	4916      	ldr	r1, [pc, #88]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002520:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800252a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fa6a 	bl	8000a04 <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002532:	e009      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002534:	f7fe fa66 	bl	8000a04 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d902      	bls.n	8002548 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	73fb      	strb	r3, [r7, #15]
          break;
 8002546:	e005      	b.n	8002554 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4904      	ldr	r1, [pc, #16]	@ (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b6a      	ldr	r3, [pc, #424]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002592:	4b67      	ldr	r3, [pc, #412]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025aa:	4b61      	ldr	r3, [pc, #388]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI2_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI2_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI2_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b55      	ldr	r3, [pc, #340]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b50      	ldr	r3, [pc, #320]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b49      	ldr	r3, [pc, #292]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4939      	ldr	r1, [pc, #228]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d167      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002654:	4b36      	ldr	r3, [pc, #216]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe f9d0 	bl	8000a04 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002668:	f7fe f9cc 	bl	8000a04 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800267c:	4b2c      	ldr	r3, [pc, #176]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d14a      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800269c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	0912      	lsrs	r2, r2, #4
 80026ac:	0452      	lsls	r2, r2, #17
 80026ae:	430a      	orrs	r2, r1
 80026b0:	491f      	ldr	r1, [pc, #124]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	614b      	str	r3, [r1, #20]
 80026b6:	e011      	b.n	80026dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6912      	ldr	r2, [r2, #16]
 80026ce:	0852      	lsrs	r2, r2, #1
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0652      	lsls	r2, r2, #25
 80026d4:	430a      	orrs	r2, r1
 80026d6:	4916      	ldr	r1, [pc, #88]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026dc:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe f98c 	bl	8000a04 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ee:	e009      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f0:	f7fe f988 	bl	8000a04 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
          break;
 8002702:	e005      	b.n	8002710 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4904      	ldr	r1, [pc, #16]	@ (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e040      	b.n	80027c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f80a 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	@ 0x24
 8002760:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fedc 	bl	8003538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fc21 	bl	8002fc8 <UART_SetConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01b      	b.n	80027c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800279e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 ff5b 	bl	800367c <UART_CheckIdleState>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d177      	bne.n	80028d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_UART_Transmit+0x24>
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e070      	b.n	80028da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2221      	movs	r2, #33	@ 0x21
 8002804:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002806:	f7fe f8fd 	bl	8000a04 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002824:	d108      	bne.n	8002838 <HAL_UART_Transmit+0x68>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e003      	b.n	8002840 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002840:	e02f      	b.n	80028a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 ffbd 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e03b      	b.n	80028da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002874:	b292      	uxth	r2, r2
 8002876:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	3302      	adds	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e007      	b.n	8002890 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1c9      	bne.n	8002842 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2140      	movs	r1, #64	@ 0x40
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 ff87 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e005      	b.n	80028da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d137      	bne.n	800296c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_UART_Receive_IT+0x24>
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e030      	b.n	800296e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_UART_Receive_IT+0x94>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01f      	beq.n	800295c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	613b      	str	r3, [r7, #16]
   return(result);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	69f9      	ldr	r1, [r7, #28]
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	61bb      	str	r3, [r7, #24]
   return(result);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e6      	bne.n	800292a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	461a      	mov	r2, r3
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 ffa0 	bl	80038a8 <UART_Start_Receive_IT>
 8002968:	4603      	mov	r3, r0
 800296a:	e000      	b.n	800296e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3728      	adds	r7, #40	@ 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40008000 	.word	0x40008000

0800297c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0ba      	sub	sp, #232	@ 0xe8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029aa:	4013      	ands	r3, r2
 80029ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00f      	beq.n	80029e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 82ca 	beq.w	8002f6e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
      }
      return;
 80029e2:	e2c4      	b.n	8002f6e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8117 	beq.w	8002c1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029fe:	4b85      	ldr	r3, [pc, #532]	@ (8002c14 <HAL_UART_IRQHandler+0x298>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 810a 	beq.w	8002c1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0xbc>
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HAL_UART_IRQHandler+0xec>
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d011      	beq.n	8002a98 <HAL_UART_IRQHandler+0x11c>
 8002a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2204      	movs	r2, #4
 8002a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ab4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_UART_IRQHandler+0x18a>
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8230 	beq.w	8002f72 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d005      	beq.n	8002b5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04f      	beq.n	8002bfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 ff68 	bl	8003a34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	2b40      	cmp	r3, #64	@ 0x40
 8002b70:	d141      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3308      	adds	r3, #8
 8002b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1d9      	bne.n	8002b72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bca:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <HAL_UART_IRQHandler+0x29c>)
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f871 	bl	8000cba <HAL_DMA_Abort_IT>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d017      	beq.n	8002c0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002be8:	4610      	mov	r0, r2
 8002bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	e00f      	b.n	8002c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f9d4 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e00b      	b.n	8002c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9d0 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e007      	b.n	8002c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9cc 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002c0c:	e1b1      	b.n	8002f72 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0e:	bf00      	nop
    return;
 8002c10:	e1af      	b.n	8002f72 <HAL_UART_IRQHandler+0x5f6>
 8002c12:	bf00      	nop
 8002c14:	04000120 	.word	0x04000120
 8002c18:	08003afd 	.word	0x08003afd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 816a 	bne.w	8002efa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8163 	beq.w	8002efa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 815c 	beq.w	8002efa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	f040 80d4 	bne.w	8002e02 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80ad 	beq.w	8002dca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	f080 80a5 	bcs.w	8002dca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 8086 	bne.w	8002da8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1da      	bne.n	8002c9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e1      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3308      	adds	r3, #8
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3308      	adds	r3, #8
 8002d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e3      	bne.n	8002d22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d78:	f023 0310 	bic.w	r3, r3, #16
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e4      	bne.n	8002d68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd ff4b 	bl	8000c3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8f4 	bl	8002fb0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002dc8:	e0d5      	b.n	8002f76 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 80ce 	bne.w	8002f76 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	f040 80c5 	bne.w	8002f76 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8d8 	bl	8002fb0 <HAL_UARTEx_RxEventCallback>
      return;
 8002e00:	e0b9      	b.n	8002f76 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80ab 	beq.w	8002f7a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e4      	bne.n	8002e2e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	623b      	str	r3, [r7, #32]
   return(result);
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3308      	adds	r3, #8
 8002e84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e88:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e3      	bne.n	8002e64 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
 8002ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	617b      	str	r3, [r7, #20]
   return(result);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e4      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f85c 	bl	8002fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ef8:	e03f      	b.n	8002f7a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00e      	beq.n	8002f24 <HAL_UART_IRQHandler+0x5a8>
 8002f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 ffe9 	bl	8003ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f22:	e02d      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
    }
    return;
 8002f4c:	e017      	b.n	8002f7e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_UART_IRQHandler+0x604>
 8002f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fdde 	bl	8003b28 <UART_EndTransmit_IT>
    return;
 8002f6c:	e008      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
      return;
 8002f6e:	bf00      	nop
 8002f70:	e006      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
    return;
 8002f72:	bf00      	nop
 8002f74:	e004      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
      return;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
      return;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_UART_IRQHandler+0x604>
    return;
 8002f7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f80:	37e8      	adds	r7, #232	@ 0xe8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fcc:	b08a      	sub	sp, #40	@ 0x28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4ba4      	ldr	r3, [pc, #656]	@ (8003288 <UART_SetConfig+0x2c0>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003000:	430b      	orrs	r3, r1
 8003002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a99      	ldr	r2, [pc, #612]	@ (800328c <UART_SetConfig+0x2c4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	4313      	orrs	r3, r2
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	430a      	orrs	r2, r1
 8003046:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a90      	ldr	r2, [pc, #576]	@ (8003290 <UART_SetConfig+0x2c8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d126      	bne.n	80030a0 <UART_SetConfig+0xd8>
 8003052:	4b90      	ldr	r3, [pc, #576]	@ (8003294 <UART_SetConfig+0x2cc>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b03      	cmp	r3, #3
 800305e:	d81b      	bhi.n	8003098 <UART_SetConfig+0xd0>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0xa0>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003079 	.word	0x08003079
 800306c:	08003089 	.word	0x08003089
 8003070:	08003081 	.word	0x08003081
 8003074:	08003091 	.word	0x08003091
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307e:	e116      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e112      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e10e      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e10a      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e106      	b.n	80032ae <UART_SetConfig+0x2e6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003298 <UART_SetConfig+0x2d0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d138      	bne.n	800311c <UART_SetConfig+0x154>
 80030aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <UART_SetConfig+0x2cc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d82d      	bhi.n	8003114 <UART_SetConfig+0x14c>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <UART_SetConfig+0xf8>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003115 	.word	0x08003115
 80030c8:	08003115 	.word	0x08003115
 80030cc:	08003115 	.word	0x08003115
 80030d0:	08003105 	.word	0x08003105
 80030d4:	08003115 	.word	0x08003115
 80030d8:	08003115 	.word	0x08003115
 80030dc:	08003115 	.word	0x08003115
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	08003115 	.word	0x08003115
 80030e8:	08003115 	.word	0x08003115
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e0d8      	b.n	80032ae <UART_SetConfig+0x2e6>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e0d4      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e0d0      	b.n	80032ae <UART_SetConfig+0x2e6>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e0cc      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e0c8      	b.n	80032ae <UART_SetConfig+0x2e6>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5e      	ldr	r2, [pc, #376]	@ (800329c <UART_SetConfig+0x2d4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d125      	bne.n	8003172 <UART_SetConfig+0x1aa>
 8003126:	4b5b      	ldr	r3, [pc, #364]	@ (8003294 <UART_SetConfig+0x2cc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003130:	2b30      	cmp	r3, #48	@ 0x30
 8003132:	d016      	beq.n	8003162 <UART_SetConfig+0x19a>
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d818      	bhi.n	800316a <UART_SetConfig+0x1a2>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d00a      	beq.n	8003152 <UART_SetConfig+0x18a>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d814      	bhi.n	800316a <UART_SetConfig+0x1a2>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <UART_SetConfig+0x182>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d008      	beq.n	800315a <UART_SetConfig+0x192>
 8003148:	e00f      	b.n	800316a <UART_SetConfig+0x1a2>
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003150:	e0ad      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003152:	2302      	movs	r3, #2
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003158:	e0a9      	b.n	80032ae <UART_SetConfig+0x2e6>
 800315a:	2304      	movs	r3, #4
 800315c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003160:	e0a5      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003162:	2308      	movs	r3, #8
 8003164:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003168:	e0a1      	b.n	80032ae <UART_SetConfig+0x2e6>
 800316a:	2310      	movs	r3, #16
 800316c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003170:	e09d      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <UART_SetConfig+0x2d8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0x200>
 800317c:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <UART_SetConfig+0x2cc>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003186:	2bc0      	cmp	r3, #192	@ 0xc0
 8003188:	d016      	beq.n	80031b8 <UART_SetConfig+0x1f0>
 800318a:	2bc0      	cmp	r3, #192	@ 0xc0
 800318c:	d818      	bhi.n	80031c0 <UART_SetConfig+0x1f8>
 800318e:	2b80      	cmp	r3, #128	@ 0x80
 8003190:	d00a      	beq.n	80031a8 <UART_SetConfig+0x1e0>
 8003192:	2b80      	cmp	r3, #128	@ 0x80
 8003194:	d814      	bhi.n	80031c0 <UART_SetConfig+0x1f8>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <UART_SetConfig+0x1d8>
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d008      	beq.n	80031b0 <UART_SetConfig+0x1e8>
 800319e:	e00f      	b.n	80031c0 <UART_SetConfig+0x1f8>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e082      	b.n	80032ae <UART_SetConfig+0x2e6>
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ae:	e07e      	b.n	80032ae <UART_SetConfig+0x2e6>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b6:	e07a      	b.n	80032ae <UART_SetConfig+0x2e6>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031be:	e076      	b.n	80032ae <UART_SetConfig+0x2e6>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c6:	e072      	b.n	80032ae <UART_SetConfig+0x2e6>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <UART_SetConfig+0x2dc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d12a      	bne.n	8003228 <UART_SetConfig+0x260>
 80031d2:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <UART_SetConfig+0x2cc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e0:	d01a      	beq.n	8003218 <UART_SetConfig+0x250>
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e6:	d81b      	bhi.n	8003220 <UART_SetConfig+0x258>
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d00c      	beq.n	8003208 <UART_SetConfig+0x240>
 80031ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f2:	d815      	bhi.n	8003220 <UART_SetConfig+0x258>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <UART_SetConfig+0x238>
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fc:	d008      	beq.n	8003210 <UART_SetConfig+0x248>
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x258>
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e052      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e04e      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e04a      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e046      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e042      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a17      	ldr	r2, [pc, #92]	@ (800328c <UART_SetConfig+0x2c4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d13a      	bne.n	80032a8 <UART_SetConfig+0x2e0>
 8003232:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <UART_SetConfig+0x2cc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800323c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003240:	d01a      	beq.n	8003278 <UART_SetConfig+0x2b0>
 8003242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003246:	d81b      	bhi.n	8003280 <UART_SetConfig+0x2b8>
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324c:	d00c      	beq.n	8003268 <UART_SetConfig+0x2a0>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003252:	d815      	bhi.n	8003280 <UART_SetConfig+0x2b8>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x298>
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x2a8>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x2b8>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003266:	e022      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e01e      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e01a      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e016      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e012      	b.n	80032ae <UART_SetConfig+0x2e6>
 8003288:	efff69f3 	.word	0xefff69f3
 800328c:	40008000 	.word	0x40008000
 8003290:	40013800 	.word	0x40013800
 8003294:	40021000 	.word	0x40021000
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40004c00 	.word	0x40004c00
 80032a4:	40005000 	.word	0x40005000
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003530 <UART_SetConfig+0x568>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d17a      	bne.n	80033ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d824      	bhi.n	800330a <UART_SetConfig+0x342>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0x300>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	080032fb 	.word	0x080032fb
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800330b 	.word	0x0800330b
 80032e8:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7fe fcda 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80032f0:	61f8      	str	r0, [r7, #28]
        break;
 80032f2:	e010      	b.n	8003316 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003534 <UART_SetConfig+0x56c>)
 80032f6:	61fb      	str	r3, [r7, #28]
        break;
 80032f8:	e00d      	b.n	8003316 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7fe fc3b 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 80032fe:	61f8      	str	r0, [r7, #28]
        break;
 8003300:	e009      	b.n	8003316 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e005      	b.n	8003316 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80fb 	beq.w	8003514 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d305      	bcc.n	800333a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d903      	bls.n	8003342 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003340:	e0e8      	b.n	8003514 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2200      	movs	r2, #0
 8003346:	461c      	mov	r4, r3
 8003348:	4615      	mov	r5, r2
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	022b      	lsls	r3, r5, #8
 8003354:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003358:	0222      	lsls	r2, r4, #8
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	6849      	ldr	r1, [r1, #4]
 800335e:	0849      	lsrs	r1, r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	4688      	mov	r8, r1
 8003364:	4681      	mov	r9, r0
 8003366:	eb12 0a08 	adds.w	sl, r2, r8
 800336a:	eb43 0b09 	adc.w	fp, r3, r9
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800337c:	4650      	mov	r0, sl
 800337e:	4659      	mov	r1, fp
 8003380:	f7fc ff22 	bl	80001c8 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003392:	d308      	bcc.n	80033a6 <UART_SetConfig+0x3de>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339a:	d204      	bcs.n	80033a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e0b6      	b.n	8003514 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033ac:	e0b2      	b.n	8003514 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b6:	d15e      	bne.n	8003476 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d828      	bhi.n	8003412 <UART_SetConfig+0x44a>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <UART_SetConfig+0x400>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033fd 	.word	0x080033fd
 80033d4:	08003413 	.word	0x08003413
 80033d8:	08003403 	.word	0x08003403
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003413 	.word	0x08003413
 80033e4:	08003413 	.word	0x08003413
 80033e8:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7fe fc5a 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80033f0:	61f8      	str	r0, [r7, #28]
        break;
 80033f2:	e014      	b.n	800341e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7fe fc6c 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 80033f8:	61f8      	str	r0, [r7, #28]
        break;
 80033fa:	e010      	b.n	800341e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003534 <UART_SetConfig+0x56c>)
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e00d      	b.n	800341e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe fbb7 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8003406:	61f8      	str	r0, [r7, #28]
        break;
 8003408:	e009      	b.n	800341e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340e:	61fb      	str	r3, [r7, #28]
        break;
 8003410:	e005      	b.n	800341e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800341c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d077      	beq.n	8003514 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005a      	lsls	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d916      	bls.n	800346e <UART_SetConfig+0x4a6>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003446:	d212      	bcs.n	800346e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	b29a      	uxth	r2, r3
 800345e:	8afb      	ldrh	r3, [r7, #22]
 8003460:	4313      	orrs	r3, r2
 8003462:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	8afa      	ldrh	r2, [r7, #22]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	e052      	b.n	8003514 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003474:	e04e      	b.n	8003514 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003476:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800347a:	2b08      	cmp	r3, #8
 800347c:	d827      	bhi.n	80034ce <UART_SetConfig+0x506>
 800347e:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <UART_SetConfig+0x4bc>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034cf 	.word	0x080034cf
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034cf 	.word	0x080034cf
 80034a0:	080034cf 	.word	0x080034cf
 80034a4:	080034c7 	.word	0x080034c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7fe fbfc 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80034ac:	61f8      	str	r0, [r7, #28]
        break;
 80034ae:	e014      	b.n	80034da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe fc0e 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 80034b4:	61f8      	str	r0, [r7, #28]
        break;
 80034b6:	e010      	b.n	80034da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <UART_SetConfig+0x56c>)
 80034ba:	61fb      	str	r3, [r7, #28]
        break;
 80034bc:	e00d      	b.n	80034da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7fe fb59 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 80034c2:	61f8      	str	r0, [r7, #28]
        break;
 80034c4:	e009      	b.n	80034da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ca:	61fb      	str	r3, [r7, #28]
        break;
 80034cc:	e005      	b.n	80034da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034d8:	bf00      	nop
    }

    if (pclk != 0U)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d019      	beq.n	8003514 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	085a      	lsrs	r2, r3, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d909      	bls.n	800350e <UART_SetConfig+0x546>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d205      	bcs.n	800350e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e002      	b.n	8003514 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003520:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	40008000 	.word	0x40008000
 8003534:	00f42400 	.word	0x00f42400

08003538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01a      	beq.n	800364e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003636:	d10a      	bne.n	800364e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b098      	sub	sp, #96	@ 0x60
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800368c:	f7fd f9ba 	bl	8000a04 <HAL_GetTick>
 8003690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d12e      	bne.n	80036fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f88c 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d021      	beq.n	80036fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e6      	bne.n	80036ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e062      	b.n	80037c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d149      	bne.n	80037a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003714:	2200      	movs	r2, #0
 8003716:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f856 	bl	80037cc <UART_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03c      	beq.n	80037a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	623b      	str	r3, [r7, #32]
   return(result);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003744:	633b      	str	r3, [r7, #48]	@ 0x30
 8003746:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800374a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e6      	bne.n	8003726 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3308      	adds	r3, #8
 800375e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60fb      	str	r3, [r7, #12]
   return(result);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3308      	adds	r3, #8
 8003776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003778:	61fa      	str	r2, [r7, #28]
 800377a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	69b9      	ldr	r1, [r7, #24]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	617b      	str	r3, [r7, #20]
   return(result);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e011      	b.n	80037c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3758      	adds	r7, #88	@ 0x58
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037dc:	e04f      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d04b      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7fd f90d 	bl	8000a04 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <UART_WaitOnFlagUntilTimeout+0x30>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e04e      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d037      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b80      	cmp	r3, #128	@ 0x80
 8003812:	d034      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d031      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b08      	cmp	r3, #8
 8003826:	d110      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2208      	movs	r2, #8
 800382e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8ff 	bl	8003a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2208      	movs	r2, #8
 800383a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e029      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003858:	d111      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f8e5 	bl	8003a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	429a      	cmp	r2, r3
 800389a:	d0a0      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b097      	sub	sp, #92	@ 0x5c
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d10e      	bne.n	80038fa <UART_Start_Receive_IT+0x52>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <UART_Start_Receive_IT+0x48>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80038ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038ee:	e02d      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	22ff      	movs	r2, #255	@ 0xff
 80038f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038f8:	e028      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <UART_Start_Receive_IT+0x76>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <UART_Start_Receive_IT+0x6c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	22ff      	movs	r2, #255	@ 0xff
 800390e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003912:	e01b      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	227f      	movs	r2, #127	@ 0x7f
 8003918:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800391c:	e016      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003926:	d10d      	bne.n	8003944 <UART_Start_Receive_IT+0x9c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <UART_Start_Receive_IT+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	227f      	movs	r2, #127	@ 0x7f
 8003934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003938:	e008      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	223f      	movs	r2, #63	@ 0x3f
 800393e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003942:	e003      	b.n	800394c <UART_Start_Receive_IT+0xa4>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2222      	movs	r2, #34	@ 0x22
 8003958:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	657b      	str	r3, [r7, #84]	@ 0x54
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800397c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800397e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800398a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003998:	d107      	bne.n	80039aa <UART_Start_Receive_IT+0x102>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a21      	ldr	r2, [pc, #132]	@ (8003a2c <UART_Start_Receive_IT+0x184>)
 80039a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80039a8:	e002      	b.n	80039b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a20      	ldr	r2, [pc, #128]	@ (8003a30 <UART_Start_Receive_IT+0x188>)
 80039ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d019      	beq.n	80039ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80039cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_Start_Receive_IT+0x110>
 80039ea:	e018      	b.n	8003a1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	613b      	str	r3, [r7, #16]
   return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e6      	bne.n	80039ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	375c      	adds	r7, #92	@ 0x5c
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	08003d39 	.word	0x08003d39
 8003a30:	08003b7d 	.word	0x08003b7d

08003a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b095      	sub	sp, #84	@ 0x54
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d118      	bne.n	8003adc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6979      	ldr	r1, [r7, #20]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e6      	bne.n	8003aaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003af0:	bf00      	nop
 8003af2:	3754      	adds	r7, #84	@ 0x54
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff fa3e 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e6      	bne.n	8003b30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fa0a 	bl	8002f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b74:	bf00      	nop
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b09c      	sub	sp, #112	@ 0x70
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b94:	2b22      	cmp	r3, #34	@ 0x22
 8003b96:	f040 80be 	bne.w	8003d16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ba0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ba8:	b2d9      	uxtb	r1, r3
 8003baa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80a3 	bne.w	8003d2a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e6      	bne.n	8003be4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c36:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a34      	ldr	r2, [pc, #208]	@ (8003d34 <UART_RxISR_8BIT+0x1b8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d01f      	beq.n	8003ca8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	623b      	str	r3, [r7, #32]
   return(result);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d12e      	bne.n	8003d0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0310 	bic.w	r3, r3, #16
 8003cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	69b9      	ldr	r1, [r7, #24]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d103      	bne.n	8003cfe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff f952 	bl	8002fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d0c:	e00d      	b.n	8003d2a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fc fcd0 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 8003d14:	e009      	b.n	8003d2a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	8b1b      	ldrh	r3, [r3, #24]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	b292      	uxth	r2, r2
 8003d28:	831a      	strh	r2, [r3, #24]
}
 8003d2a:	bf00      	nop
 8003d2c:	3770      	adds	r7, #112	@ 0x70
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40008000 	.word	0x40008000

08003d38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b09c      	sub	sp, #112	@ 0x70
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d50:	2b22      	cmp	r3, #34	@ 0x22
 8003d52:	f040 80be 	bne.w	8003ed2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003d5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d6e:	4013      	ands	r3, r2
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 80a3 	bne.w	8003ee6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003db4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e6      	bne.n	8003da0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003df2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a34      	ldr	r2, [pc, #208]	@ (8003ef0 <UART_RxISR_16BIT+0x1b8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d01f      	beq.n	8003e64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e6      	bne.n	8003e32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d12e      	bne.n	8003eca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0310 	bic.w	r3, r3, #16
 8003e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e6      	bne.n	8003e72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d103      	bne.n	8003eba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff f874 	bl	8002fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ec8:	e00d      	b.n	8003ee6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fbf2 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 8003ed0:	e009      	b.n	8003ee6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	8b1b      	ldrh	r3, [r3, #24]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	831a      	strh	r2, [r3, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	3770      	adds	r7, #112	@ 0x70
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40008000 	.word	0x40008000

08003ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f50 <__libc_init_array+0x38>)
 8003f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f54 <__libc_init_array+0x3c>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	2600      	movs	r6, #0
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	4d0b      	ldr	r5, [pc, #44]	@ (8003f58 <__libc_init_array+0x40>)
 8003f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f5c <__libc_init_array+0x44>)
 8003f2c:	f000 f818 	bl	8003f60 <_init>
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	2600      	movs	r6, #0
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	080040c8 	.word	0x080040c8
 8003f54:	080040c8 	.word	0x080040c8
 8003f58:	080040c8 	.word	0x080040c8
 8003f5c:	080040cc 	.word	0x080040cc

08003f60 <_init>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr

08003f6c <_fini>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr
